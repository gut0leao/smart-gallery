name: "3. Install packages 📦"

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID (optional if stored as variable)'
        required: false
        type: string
      vm_instance:
        description: 'VM Instance Name (optional if stored as variable)'
        required: false
        type: string
      vm_zone:
        description: 'VM Zone (optional if stored as variable)'
        required: false
        type: string
      php_version:
        description: 'PHP Version'
        required: false
        default: '8.3'
        type: choice
        options:
          - '8.1'
          - '8.2'
          - '8.3'

env:
  GCP_PROJECT_ID: ${{ github.event.inputs.project_id || vars.GCP_PROJECT_ID }}
  VM_INSTANCE: ${{ github.event.inputs.vm_instance || vars.GCP_VM_INSTANCE }}
  VM_ZONE: ${{ github.event.inputs.vm_zone || vars.GCP_VM_ZONE }}
  PHP_VERSION: ${{ github.event.inputs.php_version }}

jobs:
  install-packages:
    name: 📦 Install Server Packages
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository for scripts
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Setup SSH access to VM
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access to VM..."
          
          # Generate SSH key if not exists
          if [ ! -f ~/.ssh/id_rsa ]; then
            echo "🔐 Generating SSH key..."
            ssh-keygen -t rsa -b 4096 -f ~/.ssh/id_rsa -N "" -C "github-actions-$(date +%Y%m%d)"
          fi
          
          # Add SSH key to VM metadata
          echo "📤 Adding SSH key to VM..."
          
          # Create temporary file with SSH key
          echo "github-actions:$(cat ~/.ssh/id_rsa.pub)" > /tmp/ssh-keys
          
          gcloud compute instances add-metadata $VM_INSTANCE \
            --zone=$VM_ZONE \
            --metadata-from-file ssh-keys=/tmp/ssh-keys
          
          # Clean up temporary file
          rm -f /tmp/ssh-keys
          
          # Wait a moment for key propagation
          sleep 10
          
          # Test SSH connection with retries
          echo "🧪 Testing SSH connection..."
          for i in {1..5}; do
            if gcloud compute ssh $VM_INSTANCE \
              --zone=$VM_ZONE \
              --quiet \
              --command="echo 'SSH connection successful'" 2>/dev/null; then
              echo "✅ SSH connection established successfully"
              break
            else
              echo "⏳ SSH attempt $i/5 failed, retrying in 10 seconds..."
              if [ $i -eq 5 ]; then
                echo "❌ SSH connection failed after 5 attempts"
                echo ""
                echo "🔍 Troubleshooting information:"
                echo "Run this command locally to diagnose:"
                echo "gcloud compute ssh $VM_INSTANCE --project=$GCP_PROJECT_ID --zone=$VM_ZONE --troubleshoot"
                exit 1
              fi
              sleep 10
            fi
          done

      # Verify VM is ready and accessible
      - name: ⚡ Verify VM Prerequisites
        run: |
          echo "⚡ Verifying VM prerequisites..."
          
          # Check VM status
          VM_STATUS=$(gcloud compute instances describe $VM_INSTANCE \
            --zone=$VM_ZONE \
            --format="value(status)")
          
          echo "📊 VM Status: $VM_STATUS"
          
          if [ "$VM_STATUS" != "RUNNING" ]; then
            echo "❌ VM is not running (Status: $VM_STATUS)"
            echo "🚀 Starting VM..."
            gcloud compute instances start $VM_INSTANCE --zone=$VM_ZONE
            
            echo "⏳ Waiting for VM to be ready..."
            for i in {1..12}; do
              sleep 10
              VM_STATUS=$(gcloud compute instances describe $VM_INSTANCE \
                --zone=$VM_ZONE \
                --format="value(status)")
              echo "Status check $i/12: $VM_STATUS"
              if [ "$VM_STATUS" = "RUNNING" ]; then
                break
              fi
            done
            
            if [ "$VM_STATUS" != "RUNNING" ]; then
              echo "❌ VM failed to start within 2 minutes"
              exit 1
            fi
          fi
          
          echo "✅ VM is running and ready"

      # Update system packages
      - name: 🔄 Update System Packages
        run: |
          echo "🔄 Updating system packages..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get update -y
              sudo apt-get upgrade -y
              echo '✅ System packages updated'
            "

      # Install Nginx
      - name: 🌐 Install Nginx
        run: |
          echo "🌐 Installing Nginx..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
              echo '✅ Nginx installed and started'
            "

      # Setup PHP repository
      - name: 🐘 Setup PHP Repository
        run: |
          echo "🐘 Adding PHP $PHP_VERSION repository..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo add-apt-repository -y ppa:ondrej/php
              sudo apt-get update -y
              echo '✅ PHP repository added'
            "

      # Install PHP core packages
      - name: 🐘 Install PHP Core
        run: |
          echo "🐘 Installing PHP $PHP_VERSION core packages..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y \
                php$PHP_VERSION \
                php$PHP_VERSION-fpm \
                php$PHP_VERSION-cli \
                php$PHP_VERSION-common
              echo '✅ PHP core packages installed'
            "

      # Install PHP essential extensions
      - name: 🔌 Install PHP Essential Extensions
        run: |
          echo "🔌 Installing essential PHP extensions..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y \
                php$PHP_VERSION-mysql \
                php$PHP_VERSION-xml \
                php$PHP_VERSION-curl \
                php$PHP_VERSION-gd \
                php$PHP_VERSION-mbstring \
                php$PHP_VERSION-opcache \
                php$PHP_VERSION-zip \
                php$PHP_VERSION-intl \
                php$PHP_VERSION-bcmath
              echo '✅ Essential PHP extensions installed'
            "

      # Install PHP additional extensions
      - name: 📦 Install PHP Additional Extensions
        run: |
          echo "📦 Installing additional PHP extensions..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              PHP_EXTENSIONS='imagick soap imap readline exif gettext calendar shmop sysvmsg sysvsem sysvshm'
              
              for ext in \$PHP_EXTENSIONS; do
                  if apt-cache show php$PHP_VERSION-\$ext >/dev/null 2>&1; then
                      echo \"Installing php$PHP_VERSION-\$ext...\"
                      sudo apt-get install -y php$PHP_VERSION-\$ext || echo \"Warning: Failed to install php$PHP_VERSION-\$ext\"
                  else
                      echo \"Skipping php$PHP_VERSION-\$ext (not available)\"
                  fi
              done
              echo '✅ Additional PHP extensions processed'
            "

      # Configure PHP-FPM
      - name: ⚙️ Configure PHP-FPM
        run: |
          echo "⚙️ Configuring PHP-FPM..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo systemctl enable php$PHP_VERSION-fpm
              sudo systemctl start php$PHP_VERSION-fpm
              echo '✅ PHP-FPM configured and started'
            "

      # Install MariaDB
      - name: 🗄️ Install MariaDB
        run: |
          echo "🗄️ Installing MariaDB..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y mariadb-server mariadb-client
              sudo systemctl enable mariadb
              sudo systemctl start mariadb
              echo '✅ MariaDB installed and started'
            "

      # Secure MariaDB
      - name: 🔒 Secure MariaDB Installation
        run: |
          echo "🔒 Securing MariaDB..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo mysql -e \"DELETE FROM mysql.user WHERE User='';\"
              sudo mysql -e \"DROP DATABASE IF EXISTS test;\"
              sudo mysql -e \"DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%';\"
              sudo mysql -e \"FLUSH PRIVILEGES;\"
              echo '✅ MariaDB secured'
            "

      # Install WP-CLI
      - name: 🔧 Install WP-CLI
        run: |
          echo "🔧 Installing WP-CLI..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Download WP-CLI with verification and fallback
              WP_CLI_INSTALLED=false
              
              # Try primary source (official releases)
              if curl -L -o wp-cli.phar https://github.com/wp-cli/wp-cli/releases/download/v2.8.1/wp-cli-2.8.1.phar; then
                if [ -s wp-cli.phar ] && php wp-cli.phar --version >/dev/null 2>&1; then
                  chmod +x wp-cli.phar
                  sudo mv wp-cli.phar /usr/local/bin/wp
                  WP_CLI_INSTALLED=true
                  echo '✅ WP-CLI installed from primary source'
                else
                  rm -f wp-cli.phar
                fi
              fi
              
              # Try alternative source if primary failed
              if [ \"\$WP_CLI_INSTALLED\" = false ]; then
                echo '🔄 Trying alternative WP-CLI source...'
                if curl -L -o wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar; then
                  if [ -s wp-cli.phar ] && php wp-cli.phar --version >/dev/null 2>&1; then
                    chmod +x wp-cli.phar
                    sudo mv wp-cli.phar /usr/local/bin/wp
                    WP_CLI_INSTALLED=true
                    echo '✅ WP-CLI installed from alternative source'
                  else
                    rm -f wp-cli.phar
                  fi
                fi
              fi
              
              # Final check
              if [ \"\$WP_CLI_INSTALLED\" = false ]; then
                echo '❌ Failed to install WP-CLI from all sources'
                exit 1
              fi
            "

      # Install Composer
      - name: 🎼 Install Composer
        run: |
          echo "🎼 Installing Composer..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              curl -sS https://getcomposer.org/installer | php
              sudo mv composer.phar /usr/local/bin/composer
              sudo chmod +x /usr/local/bin/composer
              echo '✅ Composer installed'
            "

      # Install additional tools
      - name: 🛠️ Install Additional Tools
        run: |
          echo "🛠️ Installing additional tools..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y \
                certbot \
                python3-certbot-nginx \
                htop \
                nano \
                vim \
                tree \
                jq \
                rsync \
                logrotate
              echo '✅ Additional tools installed'
            "

      # Create WordPress database
      - name: 🗄️ Create WordPress Database
        run: |
          echo "🗄️ Creating WordPress database..."
          
          # Generate database credentials and store them
          DB_NAME="wordpress"
          DB_USER="wordpress"
          DB_PASS=$(openssl rand -base64 32)
          
          echo "📊 Database Configuration:"
          echo "- Database Name: $DB_NAME"
          echo "- Database User: $DB_USER"
          echo "- Password Length: ${#DB_PASS} characters"
          
          # Create database setup script
          cat > setup_database.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Get parameters
          DB_NAME="$1"
          DB_USER="$2"
          DB_PASS="$3"
          
          echo "🗄️ Setting up database with provided credentials..."
          echo "- Database Name: $DB_NAME"
          echo "- Database User: $DB_USER"
          echo "- Password Length: ${#DB_PASS} characters"
          
          # Create database and user
          echo "🔧 Creating database and user..."
          sudo mysql -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || { echo "❌ Failed to create database"; exit 1; }
          sudo mysql -e "CREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';" || { echo "❌ Failed to create user"; exit 1; }
          sudo mysql -e "GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';" || { echo "❌ Failed to grant privileges"; exit 1; }
          sudo mysql -e "FLUSH PRIVILEGES;" || { echo "❌ Failed to flush privileges"; exit 1; }
          
          # Test database connection
          echo "🧪 Testing database connection..."
          if mysql -u"$DB_USER" -p"$DB_PASS" -e "USE \`$DB_NAME\`; SELECT 1;" >/dev/null 2>&1; then
            echo "✅ Database connection test successful"
          else
            echo "❌ Database connection test failed"
            exit 1
          fi
          
          # Store database credentials securely on VM
          echo "💾 Storing database credentials on VM..."
          sudo tee /root/.wp-db-config > /dev/null << EOL
          DB_NAME=$DB_NAME
          DB_USER=$DB_USER
          DB_PASS=$DB_PASS
          EOL
          
          # Set proper permissions
          sudo chmod 600 /root/.wp-db-config
          sudo chown root:root /root/.wp-db-config
          
          # Verify the config file was created correctly
          if [ -f "/root/.wp-db-config" ]; then
            echo "✅ Database config file created at /root/.wp-db-config"
            echo "📋 Config file size: $(sudo wc -c < /root/.wp-db-config) bytes"
            echo "📋 Config file permissions: $(sudo stat -c %a /root/.wp-db-config)"
          else
            echo "❌ Failed to create database config file"
            exit 1
          fi
          
          echo "✅ WordPress database setup completed successfully!"
          EOF
          
          # Copy script to VM
          gcloud compute scp setup_database.sh \
            $VM_INSTANCE:~/setup_database.sh \
            --zone=$VM_ZONE \
            --quiet
          
          # Execute database setup on VM with proper variable passing
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="chmod +x ~/setup_database.sh && ~/setup_database.sh '$DB_NAME' '$DB_USER' '$DB_PASS'"
          
          # Clean up script from VM
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="rm -f ~/setup_database.sh"
          
          # Store database credentials in deployment files
          echo "💾 Storing database credentials in deployment files..."
          mkdir -p .deployment-info
          cat > .deployment-info/database.json << EOF
          {
            "db_host": "localhost",
            "db_name": "$DB_NAME",
            "db_user": "$DB_USER",
            "db_password": "$DB_PASS",
            "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF
          
          # Determine which token to use for GitHub API
          echo "🔐 Determining authentication method..."
          if [ -n "${{ secrets.GH_PAT }}" ]; then
            echo "✅ Using Personal Access Token (GH_PAT)"
            GITHUB_AUTH_TOKEN="${{ secrets.GH_PAT }}"
            TOKEN_TYPE="Personal Access Token"
          else
            echo "📋 Using default GITHUB_TOKEN (may have limited permissions)"
            GITHUB_AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            TOKEN_TYPE="Default GITHUB_TOKEN"
          fi
          
          # Try to store as GitHub Variables (with error handling)
          echo "🔐 Attempting to store as GitHub Variables with $TOKEN_TYPE..."
          set +e  # Don't exit on error
          
          # Function to create or update GitHub Variable via REST API
          set_github_variable() {
            local var_name="$1"
            local var_value="$2"
            
            echo "🔄 Setting variable: $var_name"
            
            # Try to update existing variable first
            response=$(curl -s -w "%{http_code}" -o /tmp/gh_response.json \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/variables/$var_name" \
              -d "{\"name\":\"$var_name\",\"value\":\"$var_value\"}")
            
            http_code="${response: -3}"
            
            if [ "$http_code" = "204" ] || [ "$http_code" = "200" ]; then
              echo "✅ Updated variable: $var_name"
              return 0
            elif [ "$http_code" = "404" ]; then
              # Variable doesn't exist, try to create it
              echo "📝 Variable doesn't exist, creating new one..."
              response=$(curl -s -w "%{http_code}" -o /tmp/gh_response.json \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/${{ github.repository }}/actions/variables" \
                -d "{\"name\":\"$var_name\",\"value\":\"$var_value\"}")
              
              http_code="${response: -3}"
              
              if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
                echo "✅ Created variable: $var_name"
                return 0
              else
                echo "⚠️ Failed to create variable: $var_name (HTTP $http_code)"
                if [ -f /tmp/gh_response.json ]; then
                  echo "📋 Response: $(cat /tmp/gh_response.json)"
                fi
                return 1
              fi
            else
              echo "⚠️ Failed to update variable: $var_name (HTTP $http_code)"
              if [ -f /tmp/gh_response.json ]; then
                echo "📋 Response: $(cat /tmp/gh_response.json)"
              fi
              return 1
            fi
          }
          
          # Set database variables
          echo "📊 Setting database variables..."
          set_github_variable "WP_DB_NAME" "$DB_NAME"
          set_github_variable "WP_DB_USER" "$DB_USER"
          
          # Clean up temporary files
          rm -f /tmp/gh_response.json
          
          set -e  # Re-enable exit on error
          
          echo "✅ Database credentials stored in deployment files"
          echo "📝 Database Name: $DB_NAME"
          echo "📝 Database User: $DB_USER" 
          echo "🔐 Database Password: [STORED SECURELY ON VM]"
          echo "📁 Database info also stored in .deployment-info/database.json"

      # Verify database configuration was created successfully
      - name: ✅ Verify Database Configuration
        run: |
          echo "✅ Verifying database configuration was created successfully..."
          
          # Check local deployment files
          if [ -f ".deployment-info/database.json" ]; then
            echo "✅ Local database.json file exists"
            
            # Verify JSON structure
            if jq empty .deployment-info/database.json 2>/dev/null; then
              echo "✅ Database JSON file is valid"
              DB_NAME=$(jq -r '.db_name' .deployment-info/database.json)
              DB_USER=$(jq -r '.db_user' .deployment-info/database.json)
              echo "📋 Database info: $DB_NAME / $DB_USER"
            else
              echo "❌ Database JSON file is invalid"
              exit 1
            fi
          else
            echo "❌ Local database.json file is missing"
            exit 1
          fi
          
          # Verify VM database configuration
          echo "🔍 Verifying VM database configuration..."
          
          VM_DB_CHECK=$(gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              if [ -f '/root/.wp-db-config' ]; then
                echo 'CONFIG_FILE_EXISTS'
                # Check if file is readable and has content
                if [ -s '/root/.wp-db-config' ]; then
                  # Try to source the config and test database connectivity
                  source /root/.wp-db-config
                  if [ -n \"\$DB_NAME\" ] && [ -n \"\$DB_USER\" ] && [ -n \"\$DB_PASS\" ]; then
                    if mysql -u\"\$DB_USER\" -p\"\$DB_PASS\" -e \"USE \\\`\$DB_NAME\\\`; SELECT 1;\" >/dev/null 2>&1; then
                      echo 'DATABASE_ACCESSIBLE'
                    else
                      echo 'DATABASE_CONNECTION_FAILED'
                    fi
                  else
                    echo 'CONFIG_INCOMPLETE'
                  fi
                else
                  echo 'CONFIG_FILE_EMPTY'
                fi
              else
                echo 'CONFIG_FILE_MISSING'
              fi
            ")
          
          echo "📊 VM Database Check Result: $VM_DB_CHECK"
          
          case "$VM_DB_CHECK" in
            *"DATABASE_ACCESSIBLE"*)
              echo "✅ Database configuration is fully functional!"
              echo "🎉 Configure Environment workflow can now proceed"
              ;;
            *"CONFIG_FILE_MISSING"*)
              echo "❌ Database config file is missing from VM"
              echo "💡 This indicates the database setup script failed"
              exit 1
              ;;
            *"CONFIG_FILE_EMPTY"*)
              echo "❌ Database config file exists but is empty"
              exit 1
              ;;
            *"CONFIG_INCOMPLETE"*)
              echo "❌ Database config file is incomplete (missing variables)"
              exit 1
              ;;
            *"DATABASE_CONNECTION_FAILED"*)
              echo "❌ Database exists but connection failed"
              echo "💡 This could indicate database user/permission issues"
              exit 1
              ;;
            *)
              echo "❌ Unexpected database check result: $VM_DB_CHECK"
              exit 1
              ;;
          esac
          
          echo ""
          echo "✅ Database Configuration Verification Summary:"
          echo "✅ Local deployment files: Created and valid"
          echo "✅ VM configuration file: Created and accessible" 
          echo "✅ Database connectivity: Verified successfully"
          echo "🎯 Ready for Configure Environment workflow!"

      # Store database password as GitHub Secret
      - name: 🔐 Store Database Password as Secret
        run: |
          echo "🔐 Storing database password as GitHub Secret..."
          
          # Get the database password from VM
          DB_PASS=$(gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="sudo grep 'DB_PASS=' /root/.wp-db-config | cut -d'=' -f2")
          
          echo "📋 Database password retrieved (length: ${#DB_PASS} characters)"
          
          # Determine which token to use for secret management
          if [ -n "${{ secrets.GH_PAT }}" ]; then
            echo "✅ Using Personal Access Token (GH_PAT) for secret management"
            GITHUB_AUTH_TOKEN="${{ secrets.GH_PAT }}"
            TOKEN_TYPE="Personal Access Token"
          else
            echo "📋 Using default GITHUB_TOKEN (may have limited permissions)"
            GITHUB_AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            TOKEN_TYPE="Default GITHUB_TOKEN"
          fi
          
          # Create or update the WP_DB_PASSWORD secret
          echo "🔐 Storing database password as GitHub Secret..."
          
          # Get repository public key for encryption
          echo "🔑 Getting repository public key..."
          PUBLIC_KEY_RESPONSE=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key")
          
          PUBLIC_KEY=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key')
          KEY_ID=$(echo "$PUBLIC_KEY_RESPONSE" | jq -r '.key_id')
          
          if [ "$PUBLIC_KEY" = "null" ] || [ -z "$PUBLIC_KEY" ]; then
            echo "❌ Failed to get repository public key"
            echo "📋 This may be due to insufficient token permissions"
            echo "� Falling back to storing password hash as variable..."
            
            # Fallback: store password hash
            DB_HASH=$(echo -n "$DB_PASS" | sha256sum | cut -d' ' -f1)
            curl -L \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/variables/WP_DB_PASS_HASH" \
              -d "{\"name\":\"WP_DB_PASS_HASH\",\"value\":\"$DB_HASH\"}" \
              2>/dev/null || \
            curl -L \
              -X POST \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/variables" \
              -d "{\"name\":\"WP_DB_PASS_HASH\",\"value\":\"$DB_HASH\"}"
            
            echo "⚠️ Password stored as hash only due to API limitations"
            exit 0
          fi
          
          echo "✅ Repository public key obtained"
          
          # Install dependencies for encryption (sodium)
          echo "🔧 Installing encryption dependencies..."
          pip install pynacl > /dev/null 2>&1
          
          # Encrypt the password
          echo "🔐 Encrypting database password..."
          ENCRYPTED_VALUE=$(python3 << 'EOF'
          import base64
          import sys
          from nacl import encoding, public
          
          def encrypt_secret(public_key, secret_value):
              # Decode the public key
              public_key_bytes = base64.b64decode(public_key)
              sealed_box = public.SealedBox(public.PublicKey(public_key_bytes))
              
              # Encrypt the secret
              encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
              return base64.b64encode(encrypted).decode("utf-8")
          
          public_key = sys.argv[1]
          secret_value = sys.argv[2]
          
          try:
              result = encrypt_secret(public_key, secret_value)
              print(result)
          except Exception as e:
              print(f"ERROR: {e}", file=sys.stderr)
              sys.exit(1)
          EOF
          "$PUBLIC_KEY" "$DB_PASS")
          
          if [ $? -ne 0 ]; then
            echo "❌ Failed to encrypt password"
            exit 1
          fi
          
          echo "✅ Password encrypted successfully"
          
          # Create or update the secret
          echo "� Creating/updating GitHub Secret..."
          SECRET_RESPONSE=$(curl -s -w "%{http_code}" -o /tmp/secret_response.json \
            -X PUT \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            "https://api.github.com/repos/${{ github.repository }}/actions/secrets/WP_DB_PASSWORD" \
            -d "{
              \"encrypted_value\": \"$ENCRYPTED_VALUE\",
              \"key_id\": \"$KEY_ID\"
            }")
          
          HTTP_CODE="${SECRET_RESPONSE: -3}"
          
          if [ "$HTTP_CODE" = "201" ] || [ "$HTTP_CODE" = "204" ]; then
            echo "✅ Database password stored as GitHub Secret successfully!"
            echo "🎯 Secret name: WP_DB_PASSWORD"
            echo "🔐 Password is now securely encrypted and accessible by other workflows"
          else
            echo "❌ Failed to store secret (HTTP $HTTP_CODE)"
            if [ -f /tmp/secret_response.json ]; then
              echo "📋 Response: $(cat /tmp/secret_response.json)"
            fi
            
            # Fallback to hash storage
            echo "💡 Falling back to password hash storage..."
            DB_HASH=$(echo -n "$DB_PASS" | sha256sum | cut -d' ' -f1)
            set_github_variable "WP_DB_PASS_HASH" "$DB_HASH"
            echo "⚠️ Password stored as hash only due to API limitations"
          fi
          
          # Clean up
          rm -f /tmp/secret_response.json
          
          echo ""
          echo "✅ Database Password Storage Summary:"
          echo "🔐 Primary: GitHub Secret (WP_DB_PASSWORD) - ${{ (HTTP_CODE == '201' || HTTP_CODE == '204') && 'Success' || 'Failed' }}"
          echo "💾 VM Config: /root/.wp-db-config - Always available locally"
          echo "📁 Deployment Files: .deployment-info/database.json - Contains other DB info"
          echo ""
          echo "💡 Other workflows can now use: \${{ secrets.WP_DB_PASSWORD }}"

      # Configure log rotation
      - name: 📝 Configure Log Rotation
        run: |
          echo "📝 Configuring log rotation..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo tee /etc/logrotate.d/smart-gallery << EOL
          /var/log/smart-gallery/*.log {
              daily
              missingok
              rotate 14
              compress
              notifempty
              create 644 www-data www-data
              postrotate
                  systemctl reload nginx > /dev/null 2>&1 || true
              endscript
          }
          EOL
              echo '✅ Log rotation configured'
            "

      # Verify installation
      - name: ✅ Verify Package Installation
        run: |
          echo "🔍 Verifying package installation..."
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo '🔍 Checking installed packages...'
              
              # Check Nginx
              nginx -v 2>&1 | head -1
              systemctl is-active nginx
              
              # Check PHP
              php -v | head -1
              systemctl is-active php$PHP_VERSION-fpm
              
              # Check MariaDB
              mysql --version | head -1
              systemctl is-active mariadb
              
              # Check WP-CLI
              wp --version
              
              # Check Composer
              composer --version | head -1
              
              # Check Certbot
              certbot --version | head -1
              
              echo '✅ All packages verified successfully!'
            "

      # Display service status
      - name: 📊 Service Status Summary
        run: |
          echo "📊 Getting service status summary..."
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo '## 📊 Service Status Summary' > /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🌐 Web Server:' >> /tmp/status.md
              echo '- **Nginx**: ' \$(systemctl is-active nginx) >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🐘 PHP:' >> /tmp/status.md
              echo '- **PHP Version**: ' \$(php -v | head -1) >> /tmp/status.md
              echo '- **PHP-FPM**: ' \$(systemctl is-active php$PHP_VERSION-fpm) >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🗄️ Database:' >> /tmp/status.md
              echo '- **MariaDB**: ' \$(systemctl is-active mariadb) >> /tmp/status.md
              if [ -f /root/.wp-db-config ]; then
                source /root/.wp-db-config
                echo '- **WordPress Database**: \$DB_NAME' >> /tmp/status.md
                echo '- **Database User**: \$DB_USER' >> /tmp/status.md
                echo '- **Password**: Stored securely' >> /tmp/status.md
              fi
              echo '' >> /tmp/status.md
              echo '### 🛠️ Tools:' >> /tmp/status.md
              echo '- **WP-CLI**: ' \$(wp --version) >> /tmp/status.md
              echo '- **Composer**: Available' >> /tmp/status.md
              echo '- **Certbot**: Available' >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 💾 Stored Variables:' >> /tmp/status.md
              echo '- **WP_DB_NAME**: Available in GitHub Variables' >> /tmp/status.md
              echo '- **WP_DB_USER**: Available in GitHub Variables' >> /tmp/status.md
              echo '- **WP_DB_PASSWORD**: Stored securely on VM (/root/.wp-db-config)' >> /tmp/status.md
              echo '- **WP_DB_PASS_HASH**: Available in GitHub Variables (for verification)' >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🎯 Next Steps:' >> /tmp/status.md
              echo '1. Run **Configure Environment** workflow' >> /tmp/status.md
              echo '2. Configure WordPress and SSL' >> /tmp/status.md
              echo '3. Deploy Smart Gallery plugin' >> /tmp/status.md
              
              cat /tmp/status.md
            " >> $GITHUB_STEP_SUMMARY

      # Mark installation as completed
      - name: ✅ Mark Installation Complete
        run: |
          echo "✅ Marking installation as complete..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Create installation complete marker
              sudo tee /var/log/packages-installed << EOL
          Smart Gallery Packages Installation Complete
          Date: \$(date)
          Workflow Run: ${{ github.run_id }}
          Workflow Run Number: ${{ github.run_number }}
          
          Installed Components:
          - Nginx: \$(nginx -v 2>&1 | head -1)
          - PHP: \$(php -v | head -1)
          - MariaDB: \$(mysql --version | head -1)
          - WP-CLI: \$(wp --version)
          - Composer: \$(composer --version | head -1)
          - Certbot: \$(certbot --version | head -1)
          
          Database Configuration:
          - Database Name: wordpress
          - Database User: wordpress
          - Config File: /root/.wp-db-config (created)
          
          Installation Status: COMPLETED SUCCESSFULLY
          EOL
              
              # Set proper permissions
              sudo chmod 644 /var/log/packages-installed
              
              echo '🎉 Installation marker created at /var/log/packages-installed'
            "

      # Cleanup
      - name: 🗑️ Cleanup
        if: always()
        run: |
          rm -f install-packages.sh
          echo "✅ Installation workflow completed"