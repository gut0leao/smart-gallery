name: "3. Install packages 📦"

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID (optional if stored as variable)'
        required: false
        type: string
      vm_instance:
        description: 'VM Instance Name (optional if stored as variable)'
        required: false
        type: string
      vm_zone:
        description: 'VM Zone (optional if stored as variable)'
        required: false
        type: string
      php_version:
        description: 'PHP Version'
        required: false
        default: '8.3'
        type: choice
        options:
          - '8.1'
          - '8.2'
          - '8.3'

env:
  GCP_PROJECT_ID: ${{ github.event.inputs.project_id || vars.GCP_PROJECT_ID }}
  VM_INSTANCE: ${{ github.event.inputs.vm_instance || vars.GCP_VM_INSTANCE }}
  VM_ZONE: ${{ github.event.inputs.vm_zone || vars.GCP_VM_ZONE }}
  PHP_VERSION: ${{ github.event.inputs.php_version }}

jobs:
  install-packages:
    name: 📦 Install Server Packages
    runs-on: ubuntu-latest
    env:
      WP_DB_NAME: wordpress
      WP_DB_USER: wordpress
    
    steps:
      # Checkout repository for scripts
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "� Using GitHub Variables for all infrastructure info (no files needed)"
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Setup SSH access using key generated by provision-infra workflow
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use SSH key generated by provision-infra workflow (workflow 02)
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            echo "� Please run the 'Provision Infrastructure' workflow first"
            echo "💡 That workflow generates and stores the SSH key automatically"
            exit 1
          fi
          
          echo "📝 SSH key already in VM metadata (added by provision workflow)"
          
          # Configure gcloud to use our SSH key (prevent generating new keys)
          echo "🔧 Configuring gcloud SSH settings..."
          gcloud config set compute/region ${VM_ZONE%-*}  # Extract region from zone
          gcloud config set compute/zone $VM_ZONE
          
          # Create SSH config to force use of our key
          printf "Host *\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          echo "✅ SSH configuration ready"
          
          # Test SSH connection with retries
          echo "🧪 Testing SSH connection with workflow key..."
          for i in {1..5}; do
            if gcloud compute ssh $VM_INSTANCE \
              --ssh-key-file=~/.ssh/id_rsa \
              --zone=$VM_ZONE \
              --quiet \
              --command="echo 'SSH connection successful'" 2>/dev/null; then
              echo "✅ SSH connection established successfully"
              break
            else
              echo "⏳ SSH attempt $i/5 failed, retrying in 10 seconds..."
              if [ $i -eq 5 ]; then
                echo "❌ SSH connection failed after 5 attempts"
                echo ""
                echo "🔍 Troubleshooting information:"
                echo "  • VM_SSH_PRIVATE_KEY may not match the VM's authorized keys"
                echo "  • Re-run workflow 02 (Provision Infrastructure) to regenerate SSH key"
                echo "  • Or manually check: gcloud compute ssh $VM_INSTANCE --project=$GCP_PROJECT_ID --zone=$VM_ZONE --troubleshoot"
                exit 1
              fi
              sleep 10
            fi
          done

      # Verify VM is ready and accessible
      - name: ⚡ Verify VM Prerequisites
        run: |
          echo "⚡ Verifying VM prerequisites..."
          
          # Check VM status
          VM_STATUS=$(gcloud compute instances describe $VM_INSTANCE \
            --zone=$VM_ZONE \
            --format="value(status)")
          
          echo "📊 VM Status: $VM_STATUS"
          
          if [ "$VM_STATUS" != "RUNNING" ]; then
            echo "❌ VM is not running (Status: $VM_STATUS)"
            echo "🚀 Starting VM..."
            gcloud compute instances start $VM_INSTANCE --zone=$VM_ZONE
            
            echo "⏳ Waiting for VM to be ready..."
            for i in {1..12}; do
              sleep 10
              VM_STATUS=$(gcloud compute instances describe $VM_INSTANCE \
                --zone=$VM_ZONE \
                --format="value(status)")
              echo "Status check $i/12: $VM_STATUS"
              if [ "$VM_STATUS" = "RUNNING" ]; then
                break
              fi
            done
            
            if [ "$VM_STATUS" != "RUNNING" ]; then
              echo "❌ VM failed to start within 2 minutes"
              exit 1
            fi
          fi
          
          echo "✅ VM is running and ready"

      # Update system packages
      - name: 🔄 Update System Packages
        run: |
          echo "🔄 Updating system packages..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get update -y
              sudo apt-get upgrade -y
              echo '✅ System packages updated'
            "

      # Install Nginx
      - name: 🌐 Install Nginx
        run: |
          echo "🌐 Installing Nginx..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check if Nginx is already installed
              if dpkg -l | grep -q '^ii.*nginx.*'; then
                echo '⚡ Nginx already installed, checking status...'
                if systemctl is-active nginx >/dev/null 2>&1; then
                  echo '✅ Nginx is already installed and running'
                else
                  echo '🔄 Nginx installed but not running, starting...'
                  sudo systemctl enable nginx
                  sudo systemctl start nginx
                  echo '✅ Nginx started'
                fi
              else
                echo '📦 Installing Nginx...'
                sudo apt-get install -y nginx
                sudo systemctl enable nginx
                sudo systemctl start nginx
                echo '✅ Nginx installed and started'
              fi
            "

      # Setup PHP repository
      - name: 🐘 Setup PHP Repository
        run: |
          echo "🐘 Adding PHP $PHP_VERSION repository..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check if PHP repository is already added
              if grep -q 'ondrej/php' /etc/apt/sources.list.d/*.list 2>/dev/null; then
                echo '⚡ PHP repository already added, updating package list...'
                sudo apt-get update -y
              else
                echo '📦 Adding PHP repository...'
                sudo add-apt-repository -y ppa:ondrej/php
                sudo apt-get update -y
              fi
              echo '✅ PHP repository ready'
            "

      # Install PHP core packages
      - name: 🐘 Install PHP Core
        run: |
          echo "🐘 Installing PHP $PHP_VERSION core packages..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check if PHP is already installed
              if php$PHP_VERSION --version >/dev/null 2>&1; then
                echo '⚡ PHP $PHP_VERSION already installed'
                # Check individual packages and install missing ones
                MISSING_PACKAGES=''
                for pkg in php$PHP_VERSION php$PHP_VERSION-fpm php$PHP_VERSION-cli php$PHP_VERSION-common; do
                  if ! dpkg -l | grep -q '^ii.*'\$pkg'.*'; then
                    MISSING_PACKAGES=\"\$MISSING_PACKAGES \$pkg\"
                  fi
                done
                if [ -n \"\$MISSING_PACKAGES\" ]; then
                  echo \"📦 Installing missing PHP packages:\$MISSING_PACKAGES\"
                  sudo apt-get install -y\$MISSING_PACKAGES
                fi
              else
                echo '📦 Installing PHP $PHP_VERSION core packages...'
                sudo apt-get install -y \
                  php$PHP_VERSION \
                  php$PHP_VERSION-fpm \
                  php$PHP_VERSION-cli \
                  php$PHP_VERSION-common
              fi
              echo '✅ PHP core packages ready'
            "

      # Install PHP essential extensions
      - name: 🔌 Install PHP Essential Extensions
        run: |
          echo "🔌 Installing essential PHP extensions..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check which extensions are missing
              ESSENTIAL_EXTS='mysql xml curl gd mbstring opcache zip intl bcmath'
              MISSING_EXTS=''
              
              echo '🔍 Checking essential PHP extensions...'
              for ext in \$ESSENTIAL_EXTS; do
                if ! dpkg -l | grep -q '^ii.*php$PHP_VERSION-'\$ext'.*'; then
                  MISSING_EXTS=\"\$MISSING_EXTS php$PHP_VERSION-\$ext\"
                  echo \"  ❌ php$PHP_VERSION-\$ext (missing)\"
                else
                  echo \"  ✅ php$PHP_VERSION-\$ext (installed)\"
                fi
              done
              
              if [ -n \"\$MISSING_EXTS\" ]; then
                echo \"📦 Installing missing extensions:\$MISSING_EXTS\"
                sudo apt-get install -y\$MISSING_EXTS
                echo '✅ Missing extensions installed'
              else
                echo '⚡ All essential PHP extensions already installed'
              fi
            "

      # Install PHP additional extensions
      - name: 📦 Install PHP Additional Extensions
        run: |
          echo "📦 Installing additional PHP extensions..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              PHP_EXTENSIONS='imagick soap imap readline exif gettext calendar shmop sysvmsg sysvsem sysvshm'
              
              for ext in \$PHP_EXTENSIONS; do
                  if apt-cache show php$PHP_VERSION-\$ext >/dev/null 2>&1; then
                      echo \"Installing php$PHP_VERSION-\$ext...\"
                      sudo apt-get install -y php$PHP_VERSION-\$ext || echo \"Warning: Failed to install php$PHP_VERSION-\$ext\"
                  else
                      echo \"Skipping php$PHP_VERSION-\$ext (not available)\"
                  fi
              done
              echo '✅ Additional PHP extensions processed'
            "

      # Configure PHP-FPM
      - name: ⚙️ Configure PHP-FPM
        run: |
          echo "⚙️ Configuring PHP-FPM..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check if PHP-FPM is already running
              if systemctl is-active php$PHP_VERSION-fpm >/dev/null 2>&1; then
                echo '⚡ PHP-FPM already running'
              else
                echo '🔄 Starting PHP-FPM...'
                sudo systemctl enable php$PHP_VERSION-fpm
                sudo systemctl start php$PHP_VERSION-fpm
              fi
              echo '✅ PHP-FPM configured and started'
            "

      # Install MariaDB
      - name: 🗄️ Install MariaDB
        run: |
          echo "🗄️ Installing MariaDB..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check if MariaDB is already installed
              if mysql --version >/dev/null 2>&1; then
                echo '⚡ MariaDB already installed, checking status...'
                if systemctl is-active mariadb >/dev/null 2>&1; then
                  echo '✅ MariaDB is already installed and running'
                else
                  echo '🔄 MariaDB installed but not running, starting...'
                  sudo systemctl enable mariadb
                  sudo systemctl start mariadb
                  echo '✅ MariaDB started'
                fi
              else
                echo '📦 Installing MariaDB...'
                sudo apt-get install -y mariadb-server mariadb-client
                sudo systemctl enable mariadb
                sudo systemctl start mariadb
                echo '✅ MariaDB installed and started'
              fi
            "

      # Secure MariaDB
      - name: 🔒 Secure MariaDB Installation
        run: |
          echo "🔒 Securing MariaDB..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo mysql -e \"DELETE FROM mysql.user WHERE User='';\"
              sudo mysql -e \"DROP DATABASE IF EXISTS test;\"
              sudo mysql -e \"DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%';\"
              sudo mysql -e \"FLUSH PRIVILEGES;\"
              echo '✅ MariaDB secured'
            "

      # Install WP-CLI
      - name: 🔧 Install WP-CLI
        run: |
          echo "🔧 Installing WP-CLI..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check if WP-CLI is already installed
              if wp --version >/dev/null 2>&1; then
                echo '⚡ WP-CLI already installed:'
                wp --version
                echo '✅ WP-CLI is ready'
              else
                echo '📦 Installing WP-CLI...'
                # Download WP-CLI with verification and fallback
                WP_CLI_INSTALLED=false
                
                # Try primary source (official releases)
                if curl -L -o wp-cli.phar https://github.com/wp-cli/wp-cli/releases/download/v2.8.1/wp-cli-2.8.1.phar; then
                  if [ -s wp-cli.phar ] && php wp-cli.phar --version >/dev/null 2>&1; then
                    chmod +x wp-cli.phar
                    sudo mv wp-cli.phar /usr/local/bin/wp
                    WP_CLI_INSTALLED=true
                    echo '✅ WP-CLI installed from primary source'
                  else
                    rm -f wp-cli.phar
                  fi
                fi
                
                # Try alternative source if primary failed
                if [ \"\$WP_CLI_INSTALLED\" = false ]; then
                  echo '🔄 Trying alternative WP-CLI source...'
                  if curl -L -o wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar; then
                    if [ -s wp-cli.phar ] && php wp-cli.phar --version >/dev/null 2>&1; then
                      chmod +x wp-cli.phar
                      sudo mv wp-cli.phar /usr/local/bin/wp
                      WP_CLI_INSTALLED=true
                      echo '✅ WP-CLI installed from alternative source'
                    else
                      rm -f wp-cli.phar
                    fi
                  fi
                fi
                
                # Final check
                if [ \"\$WP_CLI_INSTALLED\" = false ]; then
                  echo '❌ Failed to install WP-CLI from all sources'
                  exit 1
                fi
              fi
            "

      # Install Composer
      - name: 🎼 Install Composer
        run: |
          echo "🎼 Installing Composer..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check if Composer is already installed
              if composer --version >/dev/null 2>&1; then
                echo '⚡ Composer already installed:'
                composer --version
                echo '✅ Composer is ready'
              else
                echo '📦 Installing Composer...'
                curl -sS https://getcomposer.org/installer | php
                sudo mv composer.phar /usr/local/bin/composer
                sudo chmod +x /usr/local/bin/composer
                echo '✅ Composer installed'
              fi
            "

      # Install additional tools
      - name: 🛠️ Install Additional Tools
        run: |
          echo "🛠️ Installing additional tools..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Check each tool and install only if missing
              TOOLS_TO_INSTALL=()
              
              # Check for certbot
              if ! dpkg -l | grep -q '^ii.*certbot '; then
                TOOLS_TO_INSTALL+=(certbot python3-certbot-nginx)
              else
                echo '⚡ certbot already installed'
              fi
              
              # Check for system tools
              for tool in htop nano vim tree jq rsync logrotate; do
                if ! command -v \$tool >/dev/null 2>&1 && ! dpkg -l | grep -q \"^ii.*\$tool \"; then
                  TOOLS_TO_INSTALL+=(\$tool)
                else
                  echo \"⚡ \$tool already installed\"
                fi
              done
              
              # Install missing tools
              if [ \${#TOOLS_TO_INSTALL[@]} -gt 0 ]; then
                echo \"📦 Installing missing tools: \${TOOLS_TO_INSTALL[*]}\"
                sudo apt-get install -y \${TOOLS_TO_INSTALL[*]}
                echo '✅ Additional tools installed'
              else
                echo '✅ All additional tools already installed'
              fi
            "

      # Create WordPress database
      - name: 🗄️ Create WordPress Database
        env:
          WP_DB_PASSWORD_SECRET: ${{ secrets.WP_DB_PASSWORD }}
        run: |
          echo "🗄️ Creating WordPress database..."
          
          # Generate database credentials and store them
          DB_NAME="wordpress"
          DB_USER="wordpress"
          
          if [ -n "$WP_DB_PASSWORD_SECRET" ]; then
            echo "🔐 Using database password from secret WP_DB_PASSWORD"
            DB_PASS="$WP_DB_PASSWORD_SECRET"
          else
            echo "⚠️ WP_DB_PASSWORD secret not set, generating a random password..."
            DB_PASS=$(openssl rand -hex 16)  # hex only, no special characters
          fi
          
          DB_PASS_B64="$(printf '%s' "$DB_PASS" | base64 | tr -d '\n')"
          
          # Create database on VM
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              DB_NAME='$DB_NAME'
              DB_USER='$DB_USER'
              DB_PASS_B64='$DB_PASS_B64'
              DB_PASS=\$(printf '%s' \"\$DB_PASS_B64\" | base64 --decode)
              
              echo '🔧 Creating database: \$DB_NAME'
              echo '🔧 Creating user: \$DB_USER'
              
              # Create database and drop user if exists
              sudo mysql -e \"CREATE DATABASE IF NOT EXISTS \$DB_NAME;\"
              sudo mysql -e \"DROP USER IF EXISTS '\$DB_USER'@'localhost';\" 2>/dev/null || true
              
              # Create user with password - use stdin to avoid quoting issues
              printf \"CREATE USER '%s'@'localhost' IDENTIFIED WITH mysql_native_password;\\n\" \"\$DB_USER\" | sudo mysql
              printf \"ALTER USER '%s'@'localhost' IDENTIFIED WITH mysql_native_password BY '%s';\\n\" \"\$DB_USER\" \"\$DB_PASS\" | sudo mysql
              sudo mysql -e \"GRANT ALL PRIVILEGES ON \$DB_NAME.* TO '\$DB_USER'@'localhost';\"
              sudo mysql -e \"FLUSH PRIVILEGES;\"
              
              # Test database connectivity
              echo '🔍 Testing database connectivity...'
              if mysql -h localhost -u \"\$DB_USER\" -p\"\$DB_PASS\" -e \"USE \$DB_NAME; SELECT 'Database setup successful' as status;\" 2>/dev/null; then
                echo '✅ Database connection test successful'
                echo '✅ WordPress database created and tested successfully'
                
                # Store success marker
                echo 'WORDPRESS_DB_READY=true' > /tmp/db-status
                echo \"DB_NAME=\$DB_NAME\" >> /tmp/db-status  
                echo \"DB_USER=\$DB_USER\" >> /tmp/db-status
                echo \"CREATED_AT=\$(date)\" >> /tmp/db-status
              else
                echo '❌ Database connectivity test failed'
                echo '🔍 Debugging information:'
                echo \"Attempting connection with user: \$DB_USER\"
                echo \"To database: \$DB_NAME\"
                mysql -h localhost -u \"\$DB_USER\" -p\"\$DB_PASS\" -e \"SELECT 'Connection test' as test;\" 2>&1 || true
                exit 1
              fi
            "
          
          # Store database credentials in deployment files
          echo "💾 Storing database credentials in deployment files..."
          mkdir -p .deployment-info
          cat > .deployment-info/database.json << EOF
          {
            "db_host": "localhost",
            "db_name": "$DB_NAME",
            "db_user": "$DB_USER",
            "db_password": "$DB_PASS",
            "created_at": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "workflow_run_id": "${{ github.run_id }}"
          }
          EOF
          
          # Determine which token to use for GitHub API
          echo "🔐 Determining authentication method..."
          if [ -n "${{ secrets.GH_PAT }}" ]; then
            echo "✅ Using Personal Access Token (GH_PAT)"
            GITHUB_AUTH_TOKEN="${{ secrets.GH_PAT }}"
            TOKEN_TYPE="Personal Access Token"
          else
            echo "📋 Using default GITHUB_TOKEN (may have limited permissions)"
            GITHUB_AUTH_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            TOKEN_TYPE="Default GITHUB_TOKEN"
          fi
          
          # Try to store as GitHub Variables (with error handling)
          echo "🔐 Attempting to store as GitHub Variables with $TOKEN_TYPE..."
          set +e  # Don't exit on error
          
          # Function to create or update GitHub Variable via REST API
          set_github_variable() {
            local var_name="$1"
            local var_value="$2"
            
            echo "🔄 Setting variable: $var_name"
            
            # Try to update existing variable first
            response=$(curl -s -w "%{http_code}" -o /tmp/gh_response.json \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              "https://api.github.com/repos/${{ github.repository }}/actions/variables/$var_name" \
              -d "{\"name\":\"$var_name\",\"value\":\"$var_value\"}")
            
            http_code="${response: -3}"
            
            if [ "$http_code" = "204" ] || [ "$http_code" = "200" ]; then
              echo "✅ Updated variable: $var_name"
              return 0
            elif [ "$http_code" = "404" ]; then
              # Variable doesn't exist, try to create it
              echo "📝 Variable doesn't exist, creating new one..."
              response=$(curl -s -w "%{http_code}" -o /tmp/gh_response.json \
                -X POST \
                -H "Accept: application/vnd.github+json" \
                -H "Authorization: Bearer $GITHUB_AUTH_TOKEN" \
                -H "X-GitHub-Api-Version: 2022-11-28" \
                "https://api.github.com/repos/${{ github.repository }}/actions/variables" \
                -d "{\"name\":\"$var_name\",\"value\":\"$var_value\"}")
              
              http_code="${response: -3}"
              
              if [ "$http_code" = "201" ] || [ "$http_code" = "200" ]; then
                echo "✅ Created variable: $var_name"
                return 0
              else
                echo "⚠️ Failed to create variable: $var_name (HTTP $http_code)"
                if [ -f /tmp/gh_response.json ]; then
                  echo "📋 Response: $(cat /tmp/gh_response.json)"
                fi
                return 1
              fi
            else
              echo "⚠️ Failed to update variable: $var_name (HTTP $http_code)"
              if [ -f /tmp/gh_response.json ]; then
                echo "📋 Response: $(cat /tmp/gh_response.json)"
              fi
              return 1
            fi
          }
          
          # Set database variables
          echo "📊 Setting database variables..."
          set_github_variable "WP_DB_NAME" "$DB_NAME"
          set_github_variable "WP_DB_USER" "$DB_USER"
          
          # Clean up temporary files
          rm -f /tmp/gh_response.json
          
          set -e  # Re-enable exit on error
          
          if [ -n "$WP_DB_PASSWORD_SECRET" ]; then
            echo "✅ Database password sourced from GitHub secret WP_DB_PASSWORD"
          else
            echo "✅ Temporary database password generated for this run (stored in workflow env)"
          fi
          echo "📝 Database Name: $DB_NAME"
          echo "📝 Database User: $DB_USER"
          if [ -n "$WP_DB_PASSWORD_SECRET" ]; then
            echo "🔐 Database Password: Managed via secret WP_DB_PASSWORD"
          else
            echo "🔐 Database Password: Generated for this workflow run only"
          fi

      # Configure log rotation
      - name: 📝 Configure Log Rotation
        run: |
          echo "📝 Configuring log rotation..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo tee /etc/logrotate.d/smart-gallery << EOL
          /var/log/smart-gallery/*.log {
              daily
              missingok
              rotate 14
              compress
              notifempty
              create 644 www-data www-data
              postrotate
                  systemctl reload nginx > /dev/null 2>&1 || true
              endscript
          }
          EOL
              echo '✅ Log rotation configured'
            "

      # Verify installation
      - name: ✅ Verify Package Installation
        run: |
          echo "🔍 Verifying package installation..."
          
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo '🔍 Checking installed packages...'
              
              # Check Nginx
              nginx -v 2>&1 | head -1
              systemctl is-active nginx
              
              # Check PHP
              php -v | head -1
              systemctl is-active php$PHP_VERSION-fpm
              
              # Check MariaDB
              mysql --version | head -1
              systemctl is-active mariadb
              
              # Check WP-CLI
              wp --version
              
              # Check Composer
              composer --version | head -1
              
              # Check Certbot
              certbot --version | head -1
              
              echo '✅ All packages verified successfully!'
            "

      # Display service status
      - name: 📊 Service Status Summary
        run: |
          echo "📊 Getting service status summary..."
          
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo '## 📊 Service Status Summary' > /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🌐 Web Server:' >> /tmp/status.md
              echo '- **Nginx**: ' \$(systemctl is-active nginx) >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🐘 PHP:' >> /tmp/status.md
              echo '- **PHP Version**: ' \$(php -v | head -1) >> /tmp/status.md
              echo '- **PHP-FPM**: ' \$(systemctl is-active php$PHP_VERSION-fpm) >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🗄️ Database:' >> /tmp/status.md
              echo '- **MariaDB**: ' \$(systemctl is-active mariadb) >> /tmp/status.md
              if [ -f /tmp/db-status ]; then
                source /tmp/db-status 2>/dev/null
                echo '- **WordPress Database**: \$DB_NAME' >> /tmp/status.md
                echo '- **Database User**: \$DB_USER' >> /tmp/status.md
                echo '- **Password**: Managed via GitHub secret WP_DB_PASSWORD' >> /tmp/status.md
                echo '- **Status**: Ready (connectivity tested)' >> /tmp/status.md
              fi
              echo '' >> /tmp/status.md
              echo '### 🛠️ Tools:' >> /tmp/status.md
              echo '- **WP-CLI**: ' \$(wp --version) >> /tmp/status.md
              echo '- **Composer**: Available' >> /tmp/status.md
              echo '- **Certbot**: Available' >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 💾 Stored Variables:' >> /tmp/status.md
              echo '- **WP_DB_NAME**: Available in GitHub Variables' >> /tmp/status.md
              echo '- **WP_DB_USER**: Available in GitHub Variables' >> /tmp/status.md
              echo '- **WP_DB_PASSWORD**: Stored as GitHub secret WP_DB_PASSWORD' >> /tmp/status.md
              echo '- **Database Connectivity**: ✅ Tested and confirmed' >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### 🎯 Next Steps:' >> /tmp/status.md
              echo '1. Run **Configure Environment** workflow' >> /tmp/status.md
              echo '2. Configure WordPress and SSL' >> /tmp/status.md
              echo '3. Deploy Smart Gallery plugin' >> /tmp/status.md
              
              cat /tmp/status.md
            " >> $GITHUB_STEP_SUMMARY

      # Mark installation as completed
      - name: ✅ Mark Installation Complete
        run: |
          echo "✅ Marking installation as complete..."
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Create installation complete marker
              sudo tee /var/log/packages-installed << EOL
          Smart Gallery Packages Installation Complete
          Date: \$(date)
          Workflow Run: ${{ github.run_id }}
          Workflow Run Number: ${{ github.run_number }}
          
          Installed Components:
          - Nginx: \$(nginx -v 2>&1 | head -1)
          - PHP: \$(php -v 2>&1 | head -1)
          - MariaDB: \$(mysql --version | head -1)
          - WP-CLI: \$(wp --version)
          - Composer: \$(composer --version | head -1)
          - Certbot: \$(certbot --version | head -1)
          
          Database Configuration:
          - Database Name: wordpress
          - Database User: wordpress
          - Credentials: Stored in GitHub secret WP_DB_PASSWORD
          
          Installation Status: COMPLETED SUCCESSFULLY
          EOL
              
              # Set proper permissions
              sudo chmod 644 /var/log/packages-installed
              
              echo '🎉 Installation marker created at /var/log/packages-installed'
            "

      # Final verification of database configuration
      - name: 🔍 Final Database Configuration Verification
        env:
          WP_DB_PASSWORD_SECRET: ${{ secrets.WP_DB_PASSWORD }}
        run: |
          echo "🔍 Final verification of database configuration..."
          
          DB_NAME="${WP_DB_NAME:-wordpress}"
          DB_USER="${WP_DB_USER:-wordpress}"
          DB_PASS="${WP_DB_PASSWORD_SECRET:-}"
          
          if [ -z "$DB_PASS" ] && [ -n "${WP_DB_PASSWORD_GENERATED:-}" ]; then
            DB_PASS=$(printf '%s' "$WP_DB_PASSWORD_GENERATED" | base64 --decode 2>/dev/null || true)
          fi
          
          if [ -z "$DB_PASS" ]; then
            echo "::error::Database password is not available. Ensure WP_DB_PASSWORD secret is configured."
            exit 1
          fi
          
          echo "::add-mask::$DB_PASS"
          DB_PASS_B64="$(printf '%s' "$DB_PASS" | base64 | tr -d '\n')"
          
          gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Set database credentials for verification
              DB_NAME=\"$DB_NAME\"
              DB_USER=\"$DB_USER\"
              DB_PASS_B64=\"$DB_PASS_B64\"
              DB_PASS=\$(printf '%s' \"\$DB_PASS_B64\" | base64 --decode)
              
              echo '=== FINAL DATABASE CONFIG VERIFICATION ==='
              echo \"Date: \$(date)\"
              echo \"User: \$(whoami)\"
              echo ''
              
              # Check database configuration using GitHub Variables approach
              echo '📊 Database Configuration (from GitHub Variables):'
              echo \"  Database Name: \$DB_NAME\" 
              echo \"  Database User: \$DB_USER\"
              echo '  Database Host: localhost'
              echo '  Password: Stored in GitHub Variables/Secrets'
              echo ''
              
              # Test database connectivity directly 
              echo '🗄️ Testing database connectivity:'
              if mysql -h localhost -u \"\$DB_USER\" -p\"\$DB_PASS\" -e \"USE \$DB_NAME; SELECT '✅ Database connection successful' as status;\" 2>/dev/null; then
                echo '✅ Database connection and access confirmed'
                
                # Check database setup details
                echo ''
                echo '📊 Database Details:'
                mysql -h localhost -u \"\$DB_USER\" -p\"\$DB_PASS\" -e \"
                  SELECT 
                    DATABASE() as 'Current Database',
                    USER() as 'Current User',
                    VERSION() as 'MySQL Version',
                    NOW() as 'Current Time'
                \" 2>/dev/null | sed 's/^/  /'
                
                echo '✅ DATABASE_CONFIG_STATUS: READY'
              else
                echo '❌ Database connection failed'
                echo '🔍 Debugging database connection:'
                echo \"  User: \$DB_USER\"
                echo \"  Database: \$DB_NAME\"
                echo '  Testing basic MySQL connection:'
                mysql -h localhost -u \"\$DB_USER\" -p\"\$DB_PASS\" -e \"SELECT 'Basic connection test' as test;\" 2>&1 || true
                echo '❌ DATABASE_CONFIG_STATUS: FAILED'  
                exit 1
              fi
              
              echo ''
              echo '📊 MariaDB service status:'
              systemctl status mariadb --no-pager -l | head -5 | sed 's/^/  /'
              
              echo ''
              echo '=== END VERIFICATION ==='
            "

      # Store verification results in deployment files
      - name: 📊 Store Verification Results
        env:
          WP_DB_PASSWORD_SECRET: ${{ secrets.WP_DB_PASSWORD }}
        run: |
          echo "📊 Storing verification results..."
          
          DB_NAME="${WP_DB_NAME:-wordpress}"
          DB_USER="${WP_DB_USER:-wordpress}"
          DB_PASS="${WP_DB_PASSWORD_SECRET:-}"
          
          if [ -z "$DB_PASS" ] && [ -n "${WP_DB_PASSWORD_GENERATED:-}" ]; then
            DB_PASS=$(printf '%s' "$WP_DB_PASSWORD_GENERATED" | base64 --decode 2>/dev/null || true)
          fi
          
          if [ -z "$DB_PASS" ]; then
            echo "::error::Database password is not available. Ensure WP_DB_PASSWORD secret is configured."
            exit 1
          fi
          
          echo "::add-mask::$DB_PASS"
          DB_PASS_B64="$(printf '%s' "$DB_PASS" | base64 | tr -d '\n')"
          
          # Get verification results from VM (check database connectivity instead of file)
          VERIFICATION_RESULT=$(gcloud compute ssh $VM_INSTANCE \
            --ssh-key-file=~/.ssh/id_rsa \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Set credentials for verification
              DB_NAME=\"$DB_NAME\"
              DB_USER=\"$DB_USER\"
              DB_PASS_B64=\"$DB_PASS_B64\"
              DB_PASS=\$(printf '%s' \"\$DB_PASS_B64\" | base64 --decode)
              
              if mysql -h localhost -u \"\$DB_USER\" -p\"\$DB_PASS\" -e \"USE \$DB_NAME; SELECT 1;\" >/dev/null 2>&1; then
                echo 'DATABASE_READY'
              else
                echo 'DATABASE_NOT_READY'
              fi
            ")
          
          echo "🔍 Verification result: $VERIFICATION_RESULT"
          
          # Create verification report
          mkdir -p .deployment-info
          cat > .deployment-info/install-packages-verification.json << EOF
          {
            "workflow_run_id": "${{ github.run_id }}",
            "workflow_run_number": "${{ github.run_number }}",
            "verification_timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "config_file_status": "$VERIFICATION_RESULT",
            "vm_instance": "$VM_INSTANCE",
            "vm_zone": "$VM_ZONE",
            "project_id": "$GCP_PROJECT_ID"
          }
          EOF
          
          if [ "$VERIFICATION_RESULT" = "DATABASE_READY" ]; then
            echo "✅ Database configuration verified successfully!"
            echo "✅ Database connectivity confirmed"
            echo "🎉 Database credentials stored in GitHub Variables"
            echo "🎉 The 04-configure-environment workflow should work properly"
          else
            echo "❌ Database connectivity test failed!"
            echo "💡 Check the database setup and credentials"
            echo "🔧 Check the verification output above for troubleshooting details"
          fi

      # Cleanup
      - name: 🗑️ Cleanup
        if: always()
        run: |
          rm -f install-packages.sh
          echo "✅ Installation workflow completed"
