name: "3. Install packages üì¶"

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID (optional if stored as variable)'
        required: false
        type: string
      vm_instance:
        description: 'VM Instance Name (optional if stored as variable)'
        required: false
        type: string
      vm_zone:
        description: 'VM Zone (optional if stored as variable)'
        required: false
        type: string
      php_version:
        description: 'PHP Version'
        required: false
        default: '8.3'
        type: choice
        options:
          - '8.1'
          - '8.2'
          - '8.3'

env:
  GCP_PROJECT_ID: ${{ github.event.inputs.project_id || vars.GCP_PROJECT_ID }}
  VM_INSTANCE: ${{ github.event.inputs.vm_instance || vars.GCP_VM_INSTANCE }}
  VM_ZONE: ${{ github.event.inputs.vm_zone || vars.GCP_VM_ZONE }}
  PHP_VERSION: ${{ github.event.inputs.php_version }}

jobs:
  install-packages:
    name: üì¶ Install Server Packages
    runs-on: ubuntu-latest
    
    steps:
      # Checkout repository for scripts
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # Authenticate to GCP
      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ‚òÅÔ∏è Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Update system packages
      - name: ÔøΩ Update System Packages
        run: |
          echo "üîÑ Updating system packages..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get update -y
              sudo apt-get upgrade -y
              echo '‚úÖ System packages updated'
            "

      # Install Nginx
      - name: üåê Install Nginx
        run: |
          echo "üåê Installing Nginx..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y nginx
              sudo systemctl enable nginx
              sudo systemctl start nginx
              echo '‚úÖ Nginx installed and started'
            "

      # Setup PHP repository
      - name: üêò Setup PHP Repository
        run: |
          echo "üêò Adding PHP $PHP_VERSION repository..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo add-apt-repository -y ppa:ondrej/php
              sudo apt-get update -y
              echo '‚úÖ PHP repository added'
            "

      # Install PHP core packages
      - name: üêò Install PHP Core
        run: |
          echo "üêò Installing PHP $PHP_VERSION core packages..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y \
                php$PHP_VERSION \
                php$PHP_VERSION-fpm \
                php$PHP_VERSION-cli \
                php$PHP_VERSION-common
              echo '‚úÖ PHP core packages installed'
            "

      # Install PHP essential extensions
      - name: üîå Install PHP Essential Extensions
        run: |
          echo "üîå Installing essential PHP extensions..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y \
                php$PHP_VERSION-mysql \
                php$PHP_VERSION-xml \
                php$PHP_VERSION-curl \
                php$PHP_VERSION-gd \
                php$PHP_VERSION-mbstring \
                php$PHP_VERSION-opcache \
                php$PHP_VERSION-zip \
                php$PHP_VERSION-intl \
                php$PHP_VERSION-bcmath
              echo '‚úÖ Essential PHP extensions installed'
            "

      # Install PHP additional extensions
      - name: üì¶ Install PHP Additional Extensions
        run: |
          echo "üì¶ Installing additional PHP extensions..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              PHP_EXTENSIONS='imagick soap imap readline exif gettext calendar shmop sysvmsg sysvsem sysvshm'
              
              for ext in \$PHP_EXTENSIONS; do
                  if apt-cache show php$PHP_VERSION-\$ext >/dev/null 2>&1; then
                      echo \"Installing php$PHP_VERSION-\$ext...\"
                      sudo apt-get install -y php$PHP_VERSION-\$ext || echo \"Warning: Failed to install php$PHP_VERSION-\$ext\"
                  else
                      echo \"Skipping php$PHP_VERSION-\$ext (not available)\"
                  fi
              done
              echo '‚úÖ Additional PHP extensions processed'
            "

      # Configure PHP-FPM
      - name: ‚öôÔ∏è Configure PHP-FPM
        run: |
          echo "‚öôÔ∏è Configuring PHP-FPM..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo systemctl enable php$PHP_VERSION-fpm
              sudo systemctl start php$PHP_VERSION-fpm
              echo '‚úÖ PHP-FPM configured and started'
            "

      # Install MariaDB
      - name: üóÑÔ∏è Install MariaDB
        run: |
          echo "üóÑÔ∏è Installing MariaDB..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y mariadb-server mariadb-client
              sudo systemctl enable mariadb
              sudo systemctl start mariadb
              echo '‚úÖ MariaDB installed and started'
            "

      # Secure MariaDB
      - name: üîí Secure MariaDB Installation
        run: |
          echo "üîí Securing MariaDB..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo mysql -e \"DELETE FROM mysql.user WHERE User='';\"
              sudo mysql -e \"DROP DATABASE IF EXISTS test;\"
              sudo mysql -e \"DELETE FROM mysql.db WHERE Db='test' OR Db='test\\\\_%';\"
              sudo mysql -e \"FLUSH PRIVILEGES;\"
              echo '‚úÖ MariaDB secured'
            "

      # Install WP-CLI
      - name: üîß Install WP-CLI
        run: |
          echo "üîß Installing WP-CLI..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Download WP-CLI with verification and fallback
              WP_CLI_INSTALLED=false
              
              # Try primary source (official releases)
              if curl -L -o wp-cli.phar https://github.com/wp-cli/wp-cli/releases/download/v2.8.1/wp-cli-2.8.1.phar; then
                if [ -s wp-cli.phar ] && php wp-cli.phar --version >/dev/null 2>&1; then
                  chmod +x wp-cli.phar
                  sudo mv wp-cli.phar /usr/local/bin/wp
                  WP_CLI_INSTALLED=true
                  echo '‚úÖ WP-CLI installed from primary source'
                else
                  rm -f wp-cli.phar
                fi
              fi
              
              # Try alternative source if primary failed
              if [ \"\$WP_CLI_INSTALLED\" = false ]; then
                echo 'üîÑ Trying alternative WP-CLI source...'
                if curl -L -o wp-cli.phar https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar; then
                  if [ -s wp-cli.phar ] && php wp-cli.phar --version >/dev/null 2>&1; then
                    chmod +x wp-cli.phar
                    sudo mv wp-cli.phar /usr/local/bin/wp
                    WP_CLI_INSTALLED=true
                    echo '‚úÖ WP-CLI installed from alternative source'
                  else
                    rm -f wp-cli.phar
                  fi
                fi
              fi
              
              # Final check
              if [ \"\$WP_CLI_INSTALLED\" = false ]; then
                echo '‚ùå Failed to install WP-CLI from all sources'
                exit 1
              fi
            "

      # Install Composer
      - name: üéº Install Composer
        run: |
          echo "üéº Installing Composer..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              curl -sS https://getcomposer.org/installer | php
              sudo mv composer.phar /usr/local/bin/composer
              sudo chmod +x /usr/local/bin/composer
              echo '‚úÖ Composer installed'
            "

      # Install additional tools
      - name: üõ†Ô∏è Install Additional Tools
        run: |
          echo "üõ†Ô∏è Installing additional tools..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo apt-get install -y \
                certbot \
                python3-certbot-nginx \
                htop \
                nano \
                vim \
                tree \
                jq \
                rsync \
                logrotate
              echo '‚úÖ Additional tools installed'
            "

      # Create WordPress database
      - name: üóÑÔ∏è Create WordPress Database
        run: |
          echo "üóÑÔ∏è Creating WordPress database..."
          
          # Generate database credentials and store them
          DB_NAME="wordpress"
          DB_USER="wordpress"
          DB_PASS=$(openssl rand -base64 32)
          
          # Create database on VM
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo mysql -e \"CREATE DATABASE IF NOT EXISTS $DB_NAME;\"
              sudo mysql -e \"CREATE USER IF NOT EXISTS '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASS';\"
              sudo mysql -e \"GRANT ALL PRIVILEGES ON $DB_NAME.* TO '$DB_USER'@'localhost';\"
              sudo mysql -e \"FLUSH PRIVILEGES;\"
              
              # Store database credentials securely on VM
              sudo tee /root/.wp-db-config << EOL
          DB_NAME=$DB_NAME
          DB_USER=$DB_USER
          DB_PASS=$DB_PASS
          EOL
              sudo chmod 600 /root/.wp-db-config
              echo '‚úÖ WordPress database created locally'
            "
          
          # Store database credentials as GitHub Variables for future use
          echo "üíæ Storing database credentials as GitHub Variables..."
          
          # Store database name
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/WP_DB_NAME \
            -d "{\"name\":\"WP_DB_NAME\",\"value\":\"$DB_NAME\"}" \
            2>/dev/null || \
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
            -d "{\"name\":\"WP_DB_NAME\",\"value\":\"$DB_NAME\"}"
          
          # Store database user
          curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables/WP_DB_USER \
            -d "{\"name\":\"WP_DB_USER\",\"value\":\"$DB_USER\"}" \
            2>/dev/null || \
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/variables \
            -d "{\"name\":\"WP_DB_USER\",\"value\":\"$DB_USER\"}"
          
          echo "‚úÖ Database credentials stored in GitHub Variables"
          echo "üìù Database Name: $DB_NAME"
          echo "üìù Database User: $DB_USER"
          echo "üîê Database Password: [STORED SECURELY ON VM]"

      # Store database password as GitHub Secret
      - name: üîê Store Database Password as Secret
        run: |
          echo "üîê Storing database password as GitHub Secret..."
          
          # Get the database password from VM
          DB_PASS=$(gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="sudo grep 'DB_PASS=' /root/.wp-db-config | cut -d'=' -f2")
          
          # Get the repository's public key for encryption
          PUBLIC_KEY_DATA=$(curl -s \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)
          
          PUBLIC_KEY=$(echo "$PUBLIC_KEY_DATA" | jq -r .key)
          KEY_ID=$(echo "$PUBLIC_KEY_DATA" | jq -r .key_id)
          
          # Encrypt the password using sodium (libsodium)
          # For now, we'll store it as a variable since encryption requires additional tools
          # In production, this would be properly encrypted
          
          # Store database password as a repository secret using GitHub CLI
          echo "$DB_PASS" | gh secret set WP_DB_PASSWORD --repo ${{ github.repository }}
          
          echo "‚úÖ Database password stored as GitHub Secret"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Configure log rotation
      - name: üìù Configure Log Rotation
        run: |
          echo "üìù Configuring log rotation..."
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo tee /etc/logrotate.d/smart-gallery << EOL
          /var/log/smart-gallery/*.log {
              daily
              missingok
              rotate 14
              compress
              notifempty
              create 644 www-data www-data
              postrotate
                  systemctl reload nginx > /dev/null 2>&1 || true
              endscript
          }
          EOL
              echo '‚úÖ Log rotation configured'
            "

      # Verify installation
      - name: ‚úÖ Verify Package Installation
        run: |
          echo "üîç Verifying package installation..."
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo 'üîç Checking installed packages...'
              
              # Check Nginx
              nginx -v 2>&1 | head -1
              systemctl is-active nginx
              
              # Check PHP
              php -v | head -1
              systemctl is-active php$PHP_VERSION-fpm
              
              # Check MariaDB
              mysql --version | head -1
              systemctl is-active mariadb
              
              # Check WP-CLI
              wp --version
              
              # Check Composer
              composer --version | head -1
              
              # Check Certbot
              certbot --version | head -1
              
              echo '‚úÖ All packages verified successfully!'
            "

      # Display service status
      - name: üìä Service Status Summary
        run: |
          echo "üìä Getting service status summary..."
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo '## üìä Service Status Summary' > /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### üåê Web Server:' >> /tmp/status.md
              echo '- **Nginx**: ' \$(systemctl is-active nginx) >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### üêò PHP:' >> /tmp/status.md
              echo '- **PHP Version**: ' \$(php -v | head -1) >> /tmp/status.md
              echo '- **PHP-FPM**: ' \$(systemctl is-active php$PHP_VERSION-fpm) >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### üóÑÔ∏è Database:' >> /tmp/status.md
              echo '- **MariaDB**: ' \$(systemctl is-active mariadb) >> /tmp/status.md
              if [ -f /root/.wp-db-config ]; then
                source /root/.wp-db-config
                echo '- **WordPress Database**: \$DB_NAME' >> /tmp/status.md
                echo '- **Database User**: \$DB_USER' >> /tmp/status.md
                echo '- **Password**: Stored securely' >> /tmp/status.md
              fi
              echo '' >> /tmp/status.md
              echo '### üõ†Ô∏è Tools:' >> /tmp/status.md
              echo '- **WP-CLI**: ' \$(wp --version) >> /tmp/status.md
              echo '- **Composer**: Available' >> /tmp/status.md
              echo '- **Certbot**: Available' >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### üíæ Stored Variables:' >> /tmp/status.md
              echo '- **WP_DB_NAME**: Available in GitHub Variables' >> /tmp/status.md
              echo '- **WP_DB_USER**: Available in GitHub Variables' >> /tmp/status.md
              echo '- **WP_DB_PASSWORD**: Available in GitHub Secrets' >> /tmp/status.md
              echo '' >> /tmp/status.md
              echo '### üéØ Next Steps:' >> /tmp/status.md
              echo '1. Run **Configure Environment** workflow' >> /tmp/status.md
              echo '2. Configure WordPress and SSL' >> /tmp/status.md
              echo '3. Deploy Smart Gallery plugin' >> /tmp/status.md
              
              cat /tmp/status.md
            " >> $GITHUB_STEP_SUMMARY

      # Cleanup
      - name: üóëÔ∏è Cleanup
        if: always()
        run: |
          rm -f install-packages.sh
          echo "‚úÖ Installation workflow completed"