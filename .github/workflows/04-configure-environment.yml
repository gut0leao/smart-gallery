name: "4. Configure environment ⚙️"

"on":
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID (optional if stored as variable)'
        required: false
        type: string
      vm_instance:
        description: 'VM Instance Name (optional if stored as variable)'
        required: false
        type: string
      vm_zone:
        description: 'VM Zone (optional if stored as variable)'
        required: false
        type: string
      domain_name:
        description: 'Domain name'
        required: true
        type: string
      site_title:
        description: 'WordPress Site Title'
        required: false
        default: 'Smart Gallery Demo'
        type: string
      admin_user:
        description: 'WordPress Admin Username'
        required: false
        default: 'admin'
        type: string
      admin_email:
        description: 'WordPress Admin Email'
        required: true
        type: string
      letsencrypt_email:
        description: "Let's Encrypt Email"
        required: true
        type: string

env:
  GCP_PROJECT_ID: ${{ github.event.inputs.project_id || vars.GCP_PROJECT_ID }}
  VM_INSTANCE: ${{ github.event.inputs.vm_instance || vars.GCP_VM_INSTANCE }}
  VM_ZONE: ${{ github.event.inputs.vm_zone || vars.GCP_VM_ZONE }}
  DOMAIN_NAME: ${{ github.event.inputs.domain_name }}
  SITE_TITLE: ${{ github.event.inputs.site_title }}
  ADMIN_USER: ${{ github.event.inputs.admin_user }}
  ADMIN_EMAIL: ${{ github.event.inputs.admin_email }}
  LETSENCRYPT_EMAIL: ${{ github.event.inputs.letsencrypt_email }}

jobs:
  verify-prerequisites:
    name: "🔍 Verify Prerequisites"
    runs-on: ubuntu-latest
    
    outputs:
      wp_cli_ready: ${{ steps.verify.outputs.wp_cli_ready || steps.db_recovery.outputs.wp_cli_ready }}
      database_ready: ${{ steps.verify.outputs.database_ready || steps.db_recovery.outputs.database_ready }}
      db_recovered: ${{ steps.db_recovery.outputs.db_recovered }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Verify prerequisites
      - name: 🔍 Verify System Prerequisites
        id: verify
        run: |
          echo "🔍 Verifying system prerequisites..."
          
          # Check if VM is accessible
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="echo '✅ VM is accessible'"
          
          echo ""
          echo "🔍 Checking system components..."
          
          # Get detailed system status
          SYSTEM_STATUS=$(gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo '=== System Status Check ==='
              
              # Check WP-CLI
              echo -n 'WP-CLI: '
              if [ -f /usr/local/bin/wp ] && /usr/local/bin/wp --version >/dev/null 2>&1; then
                echo 'INSTALLED (/usr/local/bin/wp --version: '$(/usr/local/bin/wp --version)')'
                WP_CLI_OK=true
              else
                echo 'NOT FOUND or NOT WORKING'
                WP_CLI_OK=false
              fi
              
              # Check database config
              echo -n 'Database Config: '
              if [ -f /root/.wp-db-config ]; then
                echo 'FOUND (/root/.wp-db-config exists)'
                echo 'Contents:'
                cat /root/.wp-db-config | sed 's/DB_PASS=.*/DB_PASS=***hidden***/' | sed 's/^/  /'
                DB_CONFIG_OK=true
              else
                echo 'NOT FOUND (/root/.wp-db-config missing)'
                DB_CONFIG_OK=false
              fi
              
              # Check MariaDB service
              echo -n 'MariaDB Service: '
              if systemctl is-active mariadb >/dev/null 2>&1; then
                echo 'RUNNING'
              else
                echo 'NOT RUNNING or NOT INSTALLED'
              fi
              
              # Check Nginx service
              echo -n 'Nginx Service: '
              if systemctl is-active nginx >/dev/null 2>&1; then
                echo 'RUNNING'
              else
                echo 'NOT RUNNING or NOT INSTALLED'
              fi
              
              # Check PHP-FPM service
              echo -n 'PHP-FPM Service: '
              if systemctl is-active php8.3-fpm >/dev/null 2>&1; then
                echo 'RUNNING'
              else
                echo 'NOT RUNNING or NOT INSTALLED'
              fi
              
              # Check if install packages workflow was completed
              echo -n 'Install Packages Marker: '
              if [ -f /var/log/packages-installed ]; then
                echo 'FOUND (packages installation completed)'
              else
                echo 'NOT FOUND (packages installation may not have completed)'
              fi
              
              echo '========================='
              
              # Return status
              if [ \"\$WP_CLI_OK\" = true ] && [ \"\$DB_CONFIG_OK\" = true ]; then
                echo 'STATUS:ALL_READY'
              elif [ \"\$WP_CLI_OK\" = false ]; then
                echo 'STATUS:WP_CLI_MISSING'
              elif [ \"\$DB_CONFIG_OK\" = false ]; then
                echo 'STATUS:DB_CONFIG_MISSING'
              else
                echo 'STATUS:UNKNOWN_ERROR'
              fi
            ")
          
          echo "$SYSTEM_STATUS"
          
          # Extract final status
          STATUS_LINE=$(echo "$SYSTEM_STATUS" | grep "STATUS:" | tail -1)
          STATUS=${STATUS_LINE#STATUS:}
          
          case "$STATUS" in
            "ALL_READY")
              echo ""
              echo "✅ All prerequisites are ready!"
              echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
              echo "database_ready=true" >> $GITHUB_OUTPUT
              ;;
            "WP_CLI_MISSING")
              echo ""
              echo "❌ WP-CLI is not installed or not working properly"
              echo "💡 Please run the 'Install Packages' workflow first"
              echo "wp_cli_ready=false" >> $GITHUB_OUTPUT
              echo "database_ready=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "DB_CONFIG_MISSING")
              echo ""
              echo "❌ Database configuration is missing"
              echo "💡 The 'Install Packages' workflow needs to be run to create database configuration"
              echo "🔍 This could mean:"
              echo "   - The workflow wasn't executed completely"
              echo "   - Database setup failed during installation"
              echo "   - Configuration file was deleted or corrupted"
              echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
              echo "database_ready=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
            *)
              echo ""
              echo "❌ Unknown system status or unexpected error"
              echo "💡 Please check the system status above and run 'Install Packages' workflow if needed"
              echo "wp_cli_ready=false" >> $GITHUB_OUTPUT
              echo "database_ready=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

      # Try to recover or recreate database configuration
      - name: � Attempt Database Configuration Recovery
        if: steps.verify.outputs.database_ready == 'false'
        id: db_recovery
        run: |
          echo "� Attempting database configuration recovery..."
          
          # First, check if we have database info in deployment files
          if [ -f ".deployment-info/database.json" ]; then
            echo "✅ Found database.json in deployment files"
            echo "📋 Attempting to restore database configuration on VM..."
            
            # Extract database info
            DB_HOST=$(jq -r '.db_host // "localhost"' .deployment-info/database.json)
            DB_NAME=$(jq -r '.db_name // ""' .deployment-info/database.json)
            DB_USER=$(jq -r '.db_user // ""' .deployment-info/database.json)
            DB_PASSWORD=$(jq -r '.db_password // ""' .deployment-info/database.json)
            
            if [ -n "$DB_NAME" ] && [ -n "$DB_USER" ] && [ -n "$DB_PASSWORD" ]; then
              echo "📋 Database credentials found in deployment files, restoring to VM..."
              
              # Restore database config file on VM
              gcloud compute ssh $VM_INSTANCE \
                --zone=$VM_ZONE \
                --quiet \
                --command="
                  echo 'Restoring database configuration from deployment files...'
                  
                  # Create the database config file
                  cat > /root/.wp-db-config << EOF
          DB_HOST=$DB_HOST
          DB_NAME=$DB_NAME
          DB_USER=$DB_USER
          DB_PASS=$DB_PASSWORD
          EOF
                  
                  # Set proper permissions
                  chmod 600 /root/.wp-db-config
                  
                  # Verify database connectivity
                  if mysql -h\$DB_HOST -u$DB_USER -p$DB_PASSWORD -e 'SELECT 1' >/dev/null 2>&1; then
                    echo '✅ Database connectivity verified!'
                    echo 'SUCCESS' > /tmp/db-recovery-status
                  else
                    echo '⚠️ Database exists but connectivity failed'
                    echo 'CONNECTIVITY_FAILED' > /tmp/db-recovery-status
                  fi
                "
              
              # Check recovery status
              RECOVERY_STATUS=$(gcloud compute ssh $VM_INSTANCE \
                --zone=$VM_ZONE \
                --quiet \
                --command="cat /tmp/db-recovery-status 2>/dev/null || echo 'FAILED'")
              
              if [ "$RECOVERY_STATUS" = "SUCCESS" ]; then
                echo "✅ Database configuration successfully restored!"
                echo "🎉 You can now proceed with the Configure Environment workflow"
                echo "db_recovered=true" >> $GITHUB_OUTPUT
                
                # Override the verify outputs to allow continuation
                echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
                echo "database_ready=true" >> $GITHUB_OUTPUT
              else
                echo "❌ Database configuration restore failed or connectivity issues"
                echo "💡 Please run the 'Install Packages' workflow to set up fresh database"
                echo "db_recovered=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ Incomplete database information in deployment files"
              echo "db_recovered=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ No database configuration found in deployment files"
            echo "💡 Attempting to create minimal database setup..."
            
            # Try to create a basic database setup if MariaDB is running
            gcloud compute ssh $VM_INSTANCE \
              --zone=$VM_ZONE \
              --quiet \
              --command="
                echo 'Checking if MariaDB is available for basic setup...'
                
                if systemctl is-active mariadb >/dev/null 2>&1; then
                  echo 'MariaDB is running, attempting basic database setup...'
                  
                  # Generate database credentials
                  DB_NAME='wordpress_\$(date +%s)'
                  DB_USER='wp_user'
                  DB_PASS=\$(openssl rand -base64 16)
                  
                  # Try to create database and user
                  if mysql -e \"CREATE DATABASE \$DB_NAME; CREATE USER '\$DB_USER'@'localhost' IDENTIFIED BY '\$DB_PASS'; GRANT ALL PRIVILEGES ON \$DB_NAME.* TO '\$DB_USER'@'localhost'; FLUSH PRIVILEGES;\" 2>/dev/null; then
                    
                    # Create config file
                    cat > /root/.wp-db-config << EOF
          DB_HOST=localhost
          DB_NAME=\$DB_NAME
          DB_USER=\$DB_USER
          DB_PASS=\$DB_PASS
          EOF
                    chmod 600 /root/.wp-db-config
                    
                    echo 'BASIC_SETUP_SUCCESS' > /tmp/db-recovery-status
                    echo \"Database: \$DB_NAME, User: \$DB_USER\" > /tmp/db-info
                  else
                    echo 'BASIC_SETUP_FAILED' > /tmp/db-recovery-status
                  fi
                else
                  echo 'MARIADB_NOT_RUNNING' > /tmp/db-recovery-status
                fi
              "
            
            RECOVERY_STATUS=$(gcloud compute ssh $VM_INSTANCE \
              --zone=$VM_ZONE \
              --quiet \
              --command="cat /tmp/db-recovery-status 2>/dev/null || echo 'FAILED'")
            
            if [ "$RECOVERY_STATUS" = "BASIC_SETUP_SUCCESS" ]; then
              echo "✅ Basic database setup completed!"
              
              # Get the database info and store it
              DB_INFO=$(gcloud compute ssh $VM_INSTANCE \
                --zone=$VM_ZONE \
                --quiet \
                --command="cat /tmp/db-info 2>/dev/null")
              
              echo "📋 Created: $DB_INFO"
              echo "🎉 You can now proceed with the Configure Environment workflow"
              echo "db_recovered=true" >> $GITHUB_OUTPUT
              echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
              echo "database_ready=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Basic database setup failed"
              echo "💡 Please run the 'Install Packages' workflow for complete setup"
              echo "db_recovered=false" >> $GITHUB_OUTPUT
            fi
          fi

      # Show helpful next steps
      - name: 📋 Prerequisites Summary & Next Steps
        if: failure()
        run: |
          echo "## 🚫 Prerequisites Check Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Configure Environment workflow cannot proceed because required system components are missing." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Required Actions:" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.db_recovery.outputs.db_recovered }}" = "true" ]; then
            echo "✅ **Database configuration was automatically recovered!**" >> $GITHUB_STEP_SUMMARY
            echo "- The workflow should now proceed to the next steps" >> $GITHUB_STEP_SUMMARY
            echo "- If it still fails, check the system diagnostics above" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. **Run the 'Install Packages' workflow first**" >> $GITHUB_STEP_SUMMARY
            echo "2. Ensure it completes successfully without errors" >> $GITHUB_STEP_SUMMARY
            echo "3. Then retry this 'Configure Environment' workflow" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 System Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **WP-CLI**: ${{ (steps.verify.outputs.wp_cli_ready == 'true' || steps.db_recovery.outputs.wp_cli_ready == 'true') && '✅ Ready' || '❌ Missing' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Config**: ${{ (steps.verify.outputs.database_ready == 'true' || steps.db_recovery.outputs.database_ready == 'true') && '✅ Ready' || '❌ Missing' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.db_recovery.outputs.db_recovered }}" = "true" ]; then
            echo "- **Recovery Status**: ✅ Database configuration recovered" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.db_recovery.outputs.db_recovered }}" = "false" ]; then
            echo "- **Recovery Status**: ❌ Automatic recovery failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Workflow Order:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Provision Infrastructure** → Create VM and networking" >> $GITHUB_STEP_SUMMARY
          echo "2. **Install Packages** → Install software and configure services" >> $GITHUB_STEP_SUMMARY
          echo "3. **Configure Environment** → Set up WordPress and SSL (this workflow)" >> $GITHUB_STEP_SUMMARY
          echo "4. **Deploy Plugin** → Install Smart Gallery plugin" >> $GITHUB_STEP_SUMMARY

  configure-nginx:
    name: "🌐 Configure Nginx & SSL"
    runs-on: ubuntu-latest
    needs: verify-prerequisites
    if: needs.verify-prerequisites.outputs.wp_cli_ready == 'true' && (needs.verify-prerequisites.outputs.database_ready == 'true' || needs.verify-prerequisites.outputs.db_recovered == 'true')
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Create Nginx configuration script
      - name: 📝 Create Nginx Configuration Script
        run: |
          cat > configure-nginx.sh << 'EOF'
          #!/bin/bash
          set -e
          exec > >(tee /var/log/nginx-configuration.log)
          exec 2>&1
          
          DOMAIN_NAME="$1"
          
          echo "🌐 Configuring Nginx for domain: $DOMAIN_NAME - $(date)"
          
          # Remove default site
          rm -f /etc/nginx/sites-enabled/default
          
          # Create WordPress site configuration
          cat > /etc/nginx/sites-available/wordpress <<NGINX_CONF
          server {
              listen 80;
              server_name $DOMAIN_NAME;
              root /var/www/html;
              index index.php index.html index.htm;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
              
              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript application/json;
              
              location = /favicon.ico { log_not_found off; access_log off; }
              location = /robots.txt { allow all; log_not_found off; access_log off; }
              location / { try_files \$uri \$uri/ /index.php?\$args; }
              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  include fastcgi_params;
              }
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              location ~ /\. { deny all; }
              location ~ ^/(wp-config\.php|wp-config-sample\.php|readme\.html|license\.txt) { deny all; }
          }
          NGINX_CONF
          
          # Enable site
          ln -sf /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/
          
          # Test and reload Nginx
          nginx -t
          systemctl reload nginx
          
          echo "✅ Nginx configuration completed!"
          EOF
          
          chmod +x configure-nginx.sh

      # Execute Nginx configuration
      - name: 🌐 Configure Nginx
        run: |
          echo "🌐 Configuring Nginx..."
          
          # Copy script to VM
          gcloud compute scp configure-nginx.sh \
            $VM_INSTANCE:~/configure-nginx.sh \
            --zone=$VM_ZONE \
            --quiet
          
          # Execute script
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo chmod +x ~/configure-nginx.sh
              sudo ~/configure-nginx.sh '$DOMAIN_NAME'
            "
          
          echo "✅ Nginx configuration completed!"

  setup-database:
    name: "🗃️ Setup Database & Security"
    runs-on: ubuntu-latest
    needs: configure-nginx
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Setup database security
      - name: 🗃️ Setup Database Security
        run: |
          echo "🗃️ Setting up database security..."
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Load database credentials
              source /root/.wp-db-config
              
              # Generate secure root password
              DB_ROOT_PASSWORD=\$(openssl rand -base64 32)
              
              # Set MariaDB root password
              echo '🔒 Setting MariaDB root password...'
              mysql -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '\$DB_ROOT_PASSWORD';\"
              
              # Store root password
              echo '[client]' > /root/.my.cnf
              echo 'user=root' >> /root/.my.cnf
              echo \"password=\$DB_ROOT_PASSWORD\" >> /root/.my.cnf
              chmod 600 /root/.my.cnf
              
              echo '✅ Database security configured!'
            "

  install-wordpress:
    name: "📥 Install WordPress"
    runs-on: ubuntu-latest
    needs: setup-database
    
    outputs:
      admin_password: ${{ steps.install.outputs.admin_password }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Install WordPress
      - name: 📥 Install WordPress
        id: install
        run: |
          echo "📥 Installing WordPress..."
          
          # Generate admin password
          ADMIN_PASSWORD=$(openssl rand -base64 24)
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Load database credentials
              source /root/.wp-db-config
              
              cd /var/www/html
              
              # Remove any existing files
              rm -rf *
              
              # Download WordPress
              /usr/local/bin/wp core download --allow-root
              
              # Create wp-config.php
              /usr/local/bin/wp config create \
                  --dbname=\$DB_NAME \
                  --dbuser=\$DB_USER \
                  --dbpass=\$DB_PASS \
                  --dbhost=localhost \
                  --allow-root
              
              # Install WordPress
              /usr/local/bin/wp core install \
                  --url=\"http://$DOMAIN_NAME\" \
                  --title=\"$SITE_TITLE\" \
                  --admin_user=$ADMIN_USER \
                  --admin_password='$ADMIN_PASSWORD' \
                  --admin_email=$ADMIN_EMAIL \
                  --allow-root
              
              # Configure WordPress settings
              echo '⚙️ Configuring WordPress...'
              
              # Set permalink structure
              /usr/local/bin/wp option update permalink_structure '/%postname%/' --allow-root
              
              # Configure timezone
              /usr/local/bin/wp option update timezone_string 'UTC' --allow-root
              
              # Set proper file permissions
              chown -R www-data:www-data /var/www/html
              find /var/www/html -type d -exec chmod 755 {} \;
              find /var/www/html -type f -exec chmod 644 {} \;
              chmod 600 /var/www/html/wp-config.php
              
              echo '✅ WordPress installation completed!'
            "
          
          echo "admin_password=$ADMIN_PASSWORD" >> $GITHUB_OUTPUT
          echo "✅ WordPress installation completed!"

  install-plugins:
    name: "🔌 Install Essential Plugins"
    runs-on: ubuntu-latest
    needs: install-wordpress
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Install essential plugins
      - name: 🔌 Install Essential Plugins
        run: |
          echo "🔌 Installing essential plugins..."
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              cd /var/www/html
              
              # Install Elementor
              echo '📦 Installing Elementor...'
              /usr/local/bin/wp plugin install elementor --activate --allow-root
              
              # Install Pods (required for Smart Gallery)
              echo '📦 Installing Pods Framework...'
              /usr/local/bin/wp plugin install pods --activate --allow-root
              
              # Install WordPress SEO
              echo '📦 Installing WordPress SEO...'
              /usr/local/bin/wp plugin install wordpress-seo --activate --allow-root
              
              # Install security plugin
              echo '📦 Installing Wordfence Security...'
              /usr/local/bin/wp plugin install wordfence --activate --allow-root
              
              # Create demo content
              echo '📝 Creating demo content...'
              /usr/local/bin/wp post create \
                  --post_type=page \
                  --post_title='Smart Gallery Demo' \
                  --post_content='<p>This page will showcase the Smart Gallery plugin functionality.</p>' \
                  --post_status=publish \
                  --allow-root
              
              echo '✅ Essential plugins installed!'
            "

  setup-ssl:
    name: "🔒 Setup SSL Certificate"
    runs-on: ubuntu-latest
    needs: install-plugins
    
    outputs:
      site_url: ${{ steps.ssl.outputs.site_url }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Setup SSL certificate
      - name: 🔒 Setup SSL Certificate
        id: ssl
        run: |
          echo "🔒 Setting up SSL certificate..."
          
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              # Configure SSL with Let's Encrypt
              echo '🔒 Getting SSL certificate...'
              
              # Get SSL certificate
              certbot --nginx \
                  --non-interactive \
                  --agree-tos \
                  --email $LETSENCRYPT_EMAIL \
                  --domains $DOMAIN_NAME \
                  --redirect
              
              # Update WordPress URL to HTTPS
              cd /var/www/html
              /usr/local/bin/wp option update home \"https://$DOMAIN_NAME\" --allow-root
              /usr/local/bin/wp option update siteurl \"https://$DOMAIN_NAME\" --allow-root
              
              # Setup auto-renewal
              echo '🔄 Setting up certificate auto-renewal...'
              if ! crontab -l 2>/dev/null | grep -q 'certbot renew'; then
                  (crontab -l 2>/dev/null; echo '0 12 * * * /usr/bin/certbot renew --quiet') | crontab -
              fi
              
              # Store credentials for later use
              echo \"ADMIN_USER=$ADMIN_USER\" > /root/.wp-admin-config
              echo \"ADMIN_PASSWORD=${{ needs.install-wordpress.outputs.admin_password }}\" >> /root/.wp-admin-config
              echo \"ADMIN_EMAIL=$ADMIN_EMAIL\" >> /root/.wp-admin-config
              echo \"SITE_URL=https://$DOMAIN_NAME\" >> /root/.wp-admin-config
              chmod 600 /root/.wp-admin-config
              
              # Final Nginx reload
              systemctl reload nginx
              
              echo '✅ SSL certificate configured!'
            "
          
          echo "site_url=https://$DOMAIN_NAME" >> $GITHUB_OUTPUT
          echo "✅ SSL setup completed!"

  health-check:
    name: "🏥 Health Check & Summary"
    runs-on: ubuntu-latest
    needs: [setup-ssl, install-wordpress]
    
    outputs:
      site_url: ${{ needs.setup-ssl.outputs.site_url }}
      admin_password: ${{ needs.install-wordpress.outputs.admin_password }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from deployment files
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information..."
          
          # Check if deployment info files exist
          if [ -f ".deployment-info/infrastructure.json" ]; then
            echo "✅ Found deployment information file"
            
            # Extract information from JSON file
            VM_NAME=$(jq -r '.vm_name // ""' .deployment-info/infrastructure.json)
            VM_ZONE=$(jq -r '.vm_zone // ""' .deployment-info/infrastructure.json)
            PROJECT_ID=$(jq -r '.project_id // ""' .deployment-info/infrastructure.json)
            
            # Override environment variables if found in deployment files
            if [ -n "$VM_NAME" ]; then
              echo "VM_INSTANCE=$VM_NAME" >> $GITHUB_ENV
            fi
            if [ -n "$VM_ZONE" ]; then
              echo "VM_ZONE=$VM_ZONE" >> $GITHUB_ENV
            fi
            if [ -n "$PROJECT_ID" ]; then
              echo "GCP_PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
            fi
            
            echo "📋 Using deployment files for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=true" >> $GITHUB_ENV
          else
            echo "📋 Using GitHub Variables/inputs for infrastructure info"
            echo "DEPLOYMENT_FILES_EXIST=false" >> $GITHUB_ENV
            
            # Use original environment variables
            echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
            echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
            echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          fi
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${VM_INSTANCE:-Not set}"
          echo "- VM Zone: ${VM_ZONE:-Not set}"
          echo "- Project ID: ${GCP_PROJECT_ID:-Not set}"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Health check
      - name: 🏥 Health Check
        env:
          SITE_URL: ${{ needs.setup-ssl.outputs.site_url }}
        run: |
          echo "🏥 Running health check..."
          
          # Wait for services to stabilize
          sleep 30
          
          # Check HTTP to HTTPS redirect
          echo "🔍 Testing HTTP to HTTPS redirect..."
          if curl -sSL -w "%{http_code}" "http://$DOMAIN_NAME" -o /dev/null | grep -q "30[1-8]"; then
            echo "✅ HTTP redirects to HTTPS!"
          else
            echo "⚠️ HTTP redirect may not be working"
          fi
          
          # Check HTTPS site
          echo "🔍 Testing HTTPS site..."
          if curl -sSf "$SITE_URL" > /dev/null; then
            echo "✅ HTTPS site is responding!"
          else
            echo "❌ HTTPS site health check failed!"
            exit 1
          fi
          
          # Check WordPress admin
          echo "🔍 Testing WordPress admin..."
          if curl -sSf "$SITE_URL/wp-admin/" > /dev/null; then
            echo "✅ WordPress admin is accessible!"
          else
            echo "⚠️ WordPress admin may need attention"
          fi
          
          echo "🎉 Health check completed!"

      # Display configuration summary
      - name: 📊 Configuration Summary
        env:
          SITE_URL: ${{ needs.setup-ssl.outputs.site_url }}
          ADMIN_PASSWORD: ${{ needs.install-wordpress.outputs.admin_password }}
        run: |
          echo "## ⚙️ Environment Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ WordPress Installation:" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: $SITE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin User**: \`$ADMIN_USER\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Password**: \`$ADMIN_PASSWORD\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Email**: $ADMIN_EMAIL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Features:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SSL Certificate (Let's Encrypt)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ HTTPS Redirect" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Headers" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Wordfence Security Plugin" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔌 Installed Plugins:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Elementor" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pods Framework" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ WordPress SEO" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Wordfence Security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run **Deploy Plugin** workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Access admin at: $SITE_URL/wp-admin/" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure Smart Gallery widget in Elementor" >> $GITHUB_STEP_SUMMARY

      # Store environment configuration
      - name: 📊 Store Environment Configuration
        env:
          SITE_URL: ${{ needs.setup-ssl.outputs.site_url }}
          ADMIN_PASSWORD: ${{ needs.install-wordpress.outputs.admin_password }}
        run: |
          echo "📊 Storing environment configuration..."
          
          # Create deployment info directory if it doesn't exist
          mkdir -p .deployment-info
          
          # Store environment configuration in deployment files
          cat > .deployment-info/environment.env << EOF
          SITE_URL=$SITE_URL
          ADMIN_USER=$ADMIN_USER
          ADMIN_PASSWORD=$ADMIN_PASSWORD
          ADMIN_EMAIL=$ADMIN_EMAIL
          DOMAIN_NAME=$DOMAIN_NAME
          SITE_TITLE=$SITE_TITLE
          LETSENCRYPT_EMAIL=$LETSENCRYPT_EMAIL
          EOF
          
          echo "✅ Environment configuration stored in deployment files"

      # Cleanup
      - name: 🗑️ Cleanup
        if: always()
        run: |
          rm -f configure-nginx.sh
          echo "✅ Configuration workflow completed"