name: "4. Configure environment ⚙️"

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID (optional if stored as variable)'
        required: false
        type: string
      vm_instance:
        description: 'VM Instance Name (optional if stored as variable)'
        required: false
        type: string
      vm_zone:
        description: 'VM Zone (optional if stored as variable)'
        required: false
        type: string
      domain_name:
        description: 'Domain name'
        required: true
        type: string
      site_title:
        description: 'WordPress Site Title'
        required: false
        default: 'Smart Gallery Demo'
        type: string
      admin_user:
        description: 'WordPress Admin Username'
        required: false
        default: 'admin'
        type: string
      admin_email:
        description: 'WordPress Admin Email'
        required: true
        type: string
      letsencrypt_email:
        description: "Let's Encrypt Email"
        required: true
        type: string

env:
  GCP_PROJECT_ID: ${{ github.event.inputs.project_id || vars.GCP_PROJECT_ID }}
  VM_INSTANCE: ${{ github.event.inputs.vm_instance || vars.GCP_VM_INSTANCE }}
  VM_ZONE: ${{ github.event.inputs.vm_zone || vars.GCP_VM_ZONE }}
  DOMAIN_NAME: ${{ github.event.inputs.domain_name }}
  SITE_TITLE: ${{ github.event.inputs.site_title }}
  ADMIN_USER: ${{ github.event.inputs.admin_user }}
  ADMIN_EMAIL: ${{ github.event.inputs.admin_email }}
  LETSENCRYPT_EMAIL: ${{ github.event.inputs.letsencrypt_email }}

jobs:
  verify-prerequisites:
    name: "🔍 Verify Prerequisites"
    runs-on: ubuntu-latest
    
    outputs:
      wp_cli_ready: ${{ steps.verify.outputs.wp_cli_ready || steps.db_recovery.outputs.wp_cli_ready }}
      database_ready: ${{ steps.verify.outputs.database_ready || steps.db_recovery.outputs.database_ready }}
      db_recovered: ${{ steps.db_recovery.outputs.db_recovered }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${{ env.VM_INSTANCE }}"
          echo "- VM Zone: ${{ env.VM_ZONE }}"
          echo "- Project ID: ${{ env.GCP_PROJECT_ID }}"
          echo "📡 Using GitHub Variables for all infrastructure info (no files needed)"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Setup SSH access using fixed key from Secrets
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use fixed SSH key from Secrets
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi
      # Verify prerequisites
      - name: 🔍 Verify System Prerequisites
        id: verify
        run: |
          echo "🔍 Verifying system prerequisites..."
          
          # Check if VM is accessible
          gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
            --zone=$VM_ZONE \
            --quiet \
            --command="echo '✅ VM is accessible'"
          
          echo ""
          echo "🔍 Checking system components..."
          
          # Get detailed system status
          SYSTEM_STATUS=$(gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
            --zone=$VM_ZONE \
            --quiet \
            --command="
              echo '=== System Status Check ==='
              
              # Check WP-CLI
              echo -n 'WP-CLI: '
              if [ -f /usr/local/bin/wp ]; then
                echo -n 'FILE EXISTS - '
                # Check if it's executable
                if [ -x /usr/local/bin/wp ]; then
                  echo -n 'EXECUTABLE - '
                  # Try to get version with explicit path and error handling
                  WP_VERSION=\$(sudo /usr/local/bin/wp --version --allow-root 2>/dev/null || echo 'VERSION_FAILED')
                  if [ \"\$WP_VERSION\" != 'VERSION_FAILED' ] && [ -n \"\$WP_VERSION\" ]; then
                    echo \"WORKING (\$WP_VERSION)\"
                    WP_CLI_OK=true
                  else
                    echo \"INSTALLED but VERSION CHECK FAILED\"
                    # Try alternative check
                    if sudo /usr/local/bin/wp --help --allow-root >/dev/null 2>&1; then
                      echo 'WP-CLI responds to --help, considering OK'
                      WP_CLI_OK=true
                    else
                      WP_CLI_OK=false
                    fi
                  fi
                else
                  echo 'NOT EXECUTABLE'
                  WP_CLI_OK=false
                fi
              else
                echo 'FILE NOT FOUND'
                WP_CLI_OK=false
              fi
              
              # Check database config (using GitHub Variables approach)
              echo -n 'Database Config: '
                            # Test database connectivity using GitHub Variables
              if systemctl is-active mariadb >/dev/null 2>&1; then
                echo 'MARIADB AVAILABLE'
                DB_CONFIG_OK=true
              else
                echo 'NO DATABASE CONFIGURATION AVAILABLE'
                DB_CONFIG_OK=false
              fi
              
              # Check MariaDB service
              echo -n 'MariaDB Service: '
              if systemctl is-active mariadb >/dev/null 2>&1; then
                echo 'RUNNING'
              else
                echo 'NOT RUNNING or NOT INSTALLED'
              fi
              
              # Check Nginx service
              echo -n 'Nginx Service: '
              if systemctl is-active nginx >/dev/null 2>&1; then
                echo 'RUNNING'
              else
                echo 'NOT RUNNING or NOT INSTALLED'
              fi
              
              # Check PHP-FPM service
              echo -n 'PHP-FPM Service: '
              if systemctl is-active php8.3-fpm >/dev/null 2>&1; then
                echo 'RUNNING'
              else
                echo 'NOT RUNNING or NOT INSTALLED'
              fi
              
              # Check if install packages workflow was completed
              echo -n 'Install Packages Marker: '
              if [ -f /var/log/packages-installed ]; then
                echo 'FOUND (packages installation completed)'
                echo 'Marker content:'
                head -5 /var/log/packages-installed 2>/dev/null | sed 's/^/    /' || echo '    (could not read marker file)'
              else
                echo 'NOT FOUND (packages installation may not have completed)'
              fi
              
              # Additional diagnostic info
              echo
              echo '=== Additional Diagnostics ==='
              echo -n 'Current user: '
              whoami
              echo -n 'Working directory: '
              pwd
              echo -n 'PATH: '
              echo \$PATH
              echo -n 'WP-CLI file permissions: '
              ls -la /usr/local/bin/wp 2>/dev/null || echo 'FILE NOT FOUND'
              echo -n 'Database config approach: '
              echo 'Using GitHub Variables (no /root access needed)'
              
              echo '========================='
              
              # Return status
              if [ \"\$WP_CLI_OK\" = true ] && [ \"\$DB_CONFIG_OK\" = true ]; then
                echo 'STATUS:ALL_READY'
              elif [ \"\$WP_CLI_OK\" = false ]; then
                echo 'STATUS:WP_CLI_MISSING'
              elif [ \"\$DB_CONFIG_OK\" = false ]; then
                echo 'STATUS:DB_CONFIG_MISSING'
              else
                echo 'STATUS:UNKNOWN_ERROR'
              fi
            ")
          
          echo "$SYSTEM_STATUS"
          
          # Extract final status
          STATUS_LINE=$(echo "$SYSTEM_STATUS" | grep "STATUS:" | tail -1)
          STATUS=${STATUS_LINE#STATUS:}
          
          case "$STATUS" in
            "ALL_READY")
              echo ""
              echo "✅ All prerequisites are ready!"
              echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
              echo "database_ready=true" >> $GITHUB_OUTPUT
              ;;
            "WP_CLI_MISSING")
              echo ""
              echo "❌ WP-CLI is not installed or not working properly"
              echo "💡 Please run the 'Install Packages' workflow first"
              echo "wp_cli_ready=false" >> $GITHUB_OUTPUT
              echo "database_ready=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
            "DATABASE_UNAVAILABLE")
              echo ""
              echo "❌ Database configuration is not available"
              echo "💡 The 'Install Packages' workflow needs to be run to set up database"
              echo "🔍 This could mean:"
              echo "   - The workflow wasn't executed completely"
              echo "   - Database setup failed during installation"
              echo "   - MariaDB service is not running"
              echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
              echo "database_ready=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
            *)
              echo ""
              echo "❌ Unknown system status or unexpected error"
              echo "💡 Please check the system status above and run 'Install Packages' workflow if needed"
              echo "wp_cli_ready=false" >> $GITHUB_OUTPUT
              echo "database_ready=false" >> $GITHUB_OUTPUT
              exit 1
              ;;
          esac

      # Try to recover or recreate database configuration
      - name: 🔧 Attempt Database Configuration Recovery
        if: steps.verify.outputs.database_ready == 'false'
        id: db_recovery
        run: |
          echo "🔧 Attempting database configuration recovery..."
          
          # Use GitHub Variables directly from environment (not as files)
          DB_HOST="localhost"
          DB_NAME="${{ vars.WP_DB_NAME || 'wordpress' }}"
          DB_USER="${{ vars.WP_DB_USER || 'wordpress' }}"
          
          # Try to get password from GitHub Secret first, then use default
          if [ -n "${{ secrets.WP_DB_PASSWORD }}" ]; then
            echo "✅ Using database password from GitHub Secret"
            DB_PASSWORD="${{ secrets.WP_DB_PASSWORD }}"
            PASSWORD_SOURCE="GitHub Secret"
          else
            echo "⚠️ GitHub Secret not available, generating password..."
            DB_PASSWORD="wordpress_$(openssl rand -base64 12)"
            PASSWORD_SOURCE="Generated"
          fi
          
          if [ -n "$DB_NAME" ] && [ -n "$DB_USER" ] && [ -n "$DB_PASSWORD" ]; then
            echo "📋 Database credentials available, restoring to VM..."
            echo "🔐 Password source: $PASSWORD_SOURCE"
            
            # Create database recovery script with proper variable handling
            cat > db_recovery.sh << 'EOF'
            #!/bin/bash
            set -e
            
            DB_HOST="$1"
            DB_NAME="$2" 
            DB_USER="$3"
            DB_PASSWORD="$4"
            
            echo "🔧 Loading database configuration from variables..."
            echo "- Host: $DB_HOST"
            echo "- Database: $DB_NAME"
            echo "- User: $DB_USER"
            echo "- Password length: ${#DB_PASSWORD} characters"
              
              # Test database connectivity first
              echo "🔍 Testing database connectivity..."
              if mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -e "USE \`$DB_NAME\`; SELECT 1;" >/dev/null 2>&1; then
                echo "✅ Database connectivity successful!"
              else
                echo "⚠️ Database connectivity failed, attempting to fix..."
                
                # Check if database exists
                if mysql -e "USE \`$DB_NAME\`;" >/dev/null 2>&1; then
                  echo "📋 Database exists, recreating user..."
                  mysql -e "DROP USER IF EXISTS '$DB_USER'@'localhost';" 2>/dev/null || true
                  mysql -e "CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';" || exit 1
                  mysql -e "GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';" || exit 1
                  mysql -e "FLUSH PRIVILEGES;" || exit 1
                else
                  echo "🔧 Database missing, recreating everything..."
                  mysql -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || exit 1
                  mysql -e "DROP USER IF EXISTS '$DB_USER'@'localhost';" 2>/dev/null || true
                  mysql -e "CREATE USER '$DB_USER'@'localhost' IDENTIFIED BY '$DB_PASSWORD';" || exit 1
                  mysql -e "GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '$DB_USER'@'localhost';" || exit 1
                  mysql -e "FLUSH PRIVILEGES;" || exit 1
                fi
                
                # Test again
                if ! mysql -h"$DB_HOST" -u"$DB_USER" -p"$DB_PASSWORD" -e "USE \`$DB_NAME\`; SELECT 1;" >/dev/null 2>&1; then
                  echo "❌ Database repair failed"
                  echo "REPAIR_FAILED" > /tmp/db-recovery-status
                  exit 1
                fi
                echo "✅ Database repaired successfully!"
              fi
              
              # Store database credentials for workflow use (no file creation needed)
              echo "💾 Database credentials verified and available..."
              echo "✅ Database setup confirmed - using GitHub Variables approach"
              echo "SUCCESS" > /tmp/db-recovery-status
              EOF
              
              # Copy and execute recovery script on VM
              gcloud compute scp db_recovery.sh \ --ssh-key-file=~/.ssh/id_rsa
                $VM_INSTANCE:~/db_recovery.sh \
                --zone=$VM_ZONE \
                --quiet
              
              gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
                --zone=$VM_ZONE \
                --quiet \
                --command="chmod +x ~/db_recovery.sh && ~/db_recovery.sh '$DB_HOST' '$DB_NAME' '$DB_USER' '$DB_PASSWORD'"
              
              # Clean up script
              gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
                --zone=$VM_ZONE \
                --quiet \
                --command="rm -f ~/db_recovery.sh" || true
              
              # Check recovery status
              RECOVERY_STATUS=$(gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
                --zone=$VM_ZONE \
                --quiet \
                --command="cat /tmp/db-recovery-status 2>/dev/null || echo 'FAILED'")
              
              if [ "$RECOVERY_STATUS" = "SUCCESS" ]; then
                echo "✅ Database configuration successfully restored!"
                echo "🎉 You can now proceed with the Configure Environment workflow"
                echo "db_recovered=true" >> $GITHUB_OUTPUT
                
                # Override the verify outputs to allow continuation
                echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
                echo "database_ready=true" >> $GITHUB_OUTPUT
              else
                echo "❌ Database configuration restore failed or connectivity issues"
                echo "💡 Please run the 'Install Packages' workflow to set up fresh database"
                echo "db_recovered=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "❌ Incomplete database information in variables"
              echo "db_recovered=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "⚠️ No database configuration found, creating standard WordPress database setup..."
            echo "💡 Attempting to create standard WordPress database setup..."
            
            # Build database setup script locally using echo (avoid inline gcloud ssh parsing issues)
            {
              echo '#!/bin/bash'
              echo 'set -e'
              echo 'echo "Checking if MariaDB is available for database setup..."'
              echo ''
              echo 'if systemctl is-active mariadb >/dev/null 2>&1; then'
              echo '  echo "MariaDB is running, creating standard WordPress database..."'
              echo '  '
              echo '  # Use standard WordPress database credentials'
              echo '  DB_NAME="wordpress"'
              echo '  DB_USER="wordpress"'
              echo '  DB_PASS=$(openssl rand -base64 32)'
              echo '  '
              echo '  echo "Creating database: $DB_NAME with user: $DB_USER"'
              echo '  '
              echo '  # Check if database already exists'
              echo '  if sudo mysql -e "USE $DB_NAME" 2>/dev/null; then'
              echo '    echo "Database exists, checking/recreating user..."'
              echo '    sudo mysql -e "DROP USER IF EXISTS '\''$DB_USER'\''@'\''localhost'\'';" 2>/dev/null || true'
              echo '  else'
              echo '    echo "Creating new database..."'
              echo '    sudo mysql -e "CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;" || { echo "Failed to create database"; exit 1; }'
              echo '  fi'
              echo '  '
              echo '  # Create user and grant permissions'
              echo '  sudo mysql -e "CREATE USER '\''$DB_USER'\''@'\''localhost'\'' IDENTIFIED BY '\''$DB_PASS'\'';" || { echo "Failed to create user"; exit 1; }'
              echo '  sudo mysql -e "GRANT ALL PRIVILEGES ON \`$DB_NAME\`.* TO '\''$DB_USER'\''@'\''localhost'\'';" || { echo "Failed to grant privileges"; exit 1; }'
              echo '  sudo mysql -e "FLUSH PRIVILEGES;" || { echo "Failed to flush privileges"; exit 1; }'
              echo '  '
              echo '  # Test database connection'
              echo '  if mysql -u"$DB_USER" -p"$DB_PASS" -e "USE \`$DB_NAME\`; SELECT 1;" >/dev/null 2>&1; then'
              echo '    echo "Database connection test successful"'
              echo '    echo "Database ready - credentials stored in variables"'
              echo '    echo "BASIC_SETUP_SUCCESS" > /tmp/db-recovery-status'
              echo '    echo "Database: $DB_NAME, User: $DB_USER, Password: ${#DB_PASS} chars" > /tmp/db-info'
              echo '  else'
              echo '    echo "Database connection test failed"'
              echo '    echo "BASIC_SETUP_FAILED" > /tmp/db-recovery-status'
              echo '  fi'
              echo 'else'
              echo '  echo "MariaDB is not running"'
              echo '  echo "MARIADB_NOT_RUNNING" > /tmp/db-recovery-status'
              echo 'fi'
            } > /tmp/create-basic-db.sh
            
            chmod +x /tmp/create-basic-db.sh
            
            # Copy script to VM using gcloud scp
            gcloud compute scp /tmp/create-basic-db.sh \ --ssh-key-file=~/.ssh/id_rsa
              $VM_INSTANCE:/tmp/create-basic-db.sh \
              --zone=$VM_ZONE \
              --quiet
            
            # Execute script on VM
            gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
              --zone=$VM_ZONE \
              --quiet \
              --command="bash /tmp/create-basic-db.sh && rm /tmp/create-basic-db.sh"
            
            # Cleanup local script
            rm -f /tmp/create-basic-db.sh
            
            RECOVERY_STATUS=$(gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
              --zone=$VM_ZONE \
              --quiet \
              --command="cat /tmp/db-recovery-status 2>/dev/null || echo 'FAILED'")
            
            if [ "$RECOVERY_STATUS" = "BASIC_SETUP_SUCCESS" ]; then
              echo "✅ Basic database setup completed!"
              
              # Get the database info and store it
              DB_INFO=$(gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
                --zone=$VM_ZONE \
                --quiet \
                --command="cat /tmp/db-info 2>/dev/null")
              
              echo "📋 Created: $DB_INFO"
              echo "🎉 You can now proceed with the Configure Environment workflow"
              echo "db_recovered=true" >> $GITHUB_OUTPUT
              echo "wp_cli_ready=true" >> $GITHUB_OUTPUT
              echo "database_ready=true" >> $GITHUB_OUTPUT
            else
              echo "❌ Basic database setup failed"
              echo "💡 Please run the 'Install Packages' workflow for complete setup"
              echo "db_recovered=false" >> $GITHUB_OUTPUT
            fi
          fi

      # Show helpful next steps
      - name: 📋 Prerequisites Summary & Next Steps
        if: failure()
        run: |
          echo "## 🚫 Prerequisites Check Failed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The Configure Environment workflow cannot proceed because required system components are missing." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔧 Required Actions:" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.db_recovery.outputs.db_recovered }}" = "true" ]; then
            echo "✅ **Database configuration was automatically recovered!**" >> $GITHUB_STEP_SUMMARY
            echo "- The workflow should now proceed to the next steps" >> $GITHUB_STEP_SUMMARY
            echo "- If it still fails, check the system diagnostics above" >> $GITHUB_STEP_SUMMARY
          else
            echo "1. **Run the 'Install Packages' workflow first**" >> $GITHUB_STEP_SUMMARY
            echo "2. Ensure it completes successfully without errors" >> $GITHUB_STEP_SUMMARY
            echo "3. Then retry this 'Configure Environment' workflow" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 System Status:" >> $GITHUB_STEP_SUMMARY
          echo "- **WP-CLI**: ${{ (steps.verify.outputs.wp_cli_ready == 'true' || steps.db_recovery.outputs.wp_cli_ready == 'true') && '✅ Ready' || '❌ Missing' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Database Config**: ${{ (steps.verify.outputs.database_ready == 'true' || steps.db_recovery.outputs.database_ready == 'true') && '✅ Ready' || '❌ Missing' }}" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ steps.db_recovery.outputs.db_recovered }}" = "true" ]; then
            echo "- **Recovery Status**: ✅ Database configuration recovered" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.db_recovery.outputs.db_recovered }}" = "false" ]; then
            echo "- **Recovery Status**: ❌ Automatic recovery failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔗 Workflow Order:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Provision Infrastructure** → Create VM and networking" >> $GITHUB_STEP_SUMMARY
          echo "2. **Install Packages** → Install software and configure services" >> $GITHUB_STEP_SUMMARY
          echo "3. **Configure Environment** → Set up WordPress and SSL (this workflow)" >> $GITHUB_STEP_SUMMARY
          echo "4. **Deploy Plugin** → Install Smart Gallery plugin" >> $GITHUB_STEP_SUMMARY

  configure-nginx:
    name: "🌐 Configure Nginx & SSL"
    runs-on: ubuntu-latest
    needs: verify-prerequisites
    if: needs.verify-prerequisites.outputs.wp_cli_ready == 'true' && (needs.verify-prerequisites.outputs.database_ready == 'true' || needs.verify-prerequisites.outputs.db_recovered == 'true')
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${{ env.VM_INSTANCE }}"
          echo "- VM Zone: ${{ env.VM_ZONE }}"
          echo "- Project ID: ${{ env.GCP_PROJECT_ID }}"
          echo "📡 Using GitHub Variables for all infrastructure info (no files needed)"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Setup SSH access using fixed key from Secrets
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use fixed SSH key from Secrets
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi
      # Create Nginx configuration script
      - name: 📝 Create Nginx Configuration Script
        run: |
          cat > configure-nginx.sh << 'EOF'
          #!/bin/bash
          set -e
          exec > >(tee /var/log/nginx-configuration.log)
          exec 2>&1
          
          DOMAIN_NAME="$1"
          
          echo "🌐 Configuring Nginx for domain: $DOMAIN_NAME - $(date)"
          
          # Remove default site
          rm -f /etc/nginx/sites-enabled/default
          
          # Create WordPress site configuration
          cat > /etc/nginx/sites-available/wordpress <<NGINX_CONF
          server {
              listen 80;
              server_name $DOMAIN_NAME;
              root /var/www/html;
              index index.php index.html index.htm;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
              
              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript application/json;
              
              location = /favicon.ico { log_not_found off; access_log off; }
              location = /robots.txt { allow all; log_not_found off; access_log off; }
              location / { try_files \$uri \$uri/ /index.php?\$args; }
              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  include fastcgi_params;
              }
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              location ~ /\. { deny all; }
              location ~ ^/(wp-config\.php|wp-config-sample\.php|readme\.html|license\.txt) { deny all; }
          }
          NGINX_CONF
          
          # Enable site
          ln -sf /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/
          
          # Test and reload Nginx
          nginx -t
          systemctl reload nginx
          
          echo "✅ Nginx configuration completed!"
          EOF
          
          chmod +x configure-nginx.sh

      # Execute Nginx configuration
      - name: 🌐 Configure Nginx
        run: |
          echo "🌐 Configuring Nginx..."
          
          # Exit immediately if any command fails
          set -e
          
          # Use SSH key from provision-infra workflow (prevent gcloud from generating new keys)
          echo "🔧 Configuring gcloud to use existing SSH key..."
          gcloud config set compute/region ${VM_ZONE%-*}
          gcloud config set compute/zone $VM_ZONE
          
          # Force use of our existing SSH key
          printf "Host *\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Copy script to VM
          if ! gcloud compute scp configure-nginx.sh \ --ssh-key-file=~/.ssh/id_rsa
            $VM_INSTANCE:~/configure-nginx.sh \
            --zone=$VM_ZONE \
            --quiet \
            --ssh-key-file=~/.ssh/id_rsa; then
            echo "❌ Failed to copy Nginx configuration script to VM"
            exit 1
          fi
          
          # Execute script
          if ! gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
            --zone=$VM_ZONE \
            --quiet \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="
              sudo chmod +x ~/configure-nginx.sh
              sudo ~/configure-nginx.sh '$DOMAIN_NAME'
            "; then
            echo "❌ Nginx configuration failed!"
            exit 1
          fi
          
          echo "✅ Nginx configuration completed successfully!"

  setup-database:
    name: "🗃️ Setup Database & Security"
    runs-on: ubuntu-latest
    needs: configure-nginx
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${{ env.VM_INSTANCE }}"
          echo "- VM Zone: ${{ env.VM_ZONE }}"
          echo "- Project ID: ${{ env.GCP_PROJECT_ID }}"
          echo "📡 Using GitHub Variables for all infrastructure info (no files needed)"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      # Setup SSH access using fixed key from Secrets
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use fixed SSH key from Secrets
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi
      # Setup database security
      - name: 🗃️ Setup Database Security
        run: |
          echo "🗃️ Setting up database security..."
          
          # Exit immediately if any command fails
          set -e
          
          # Use SSH key from provision-infra workflow (prevent gcloud from generating new keys)
          echo "🔧 Configuring gcloud to use existing SSH key..."
          gcloud config set compute/region ${VM_ZONE%-*}
          gcloud config set compute/zone $VM_ZONE
          
          # Force use of our existing SSH key (prevent new key generation)
          printf "Host *\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Execute database security setup with proper error handling
          if ! gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
            --zone=$VM_ZONE \
            --quiet \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="
              set -e  # Exit on any error
              
              echo '🔍 Checking database service status...'
              if ! systemctl is-active mariadb >/dev/null 2>&1; then
                echo '❌ MariaDB service is not running!'
                echo '💡 Please run the Install Packages workflow first'
                exit 1
              fi
              echo '✅ MariaDB service is running'
              
              # Use database credentials from GitHub Variables
              DB_HOST='localhost'
              DB_NAME='${{ vars.WP_DB_NAME || 'wordpress' }}'
              DB_USER='${{ vars.WP_DB_USER || 'wordpress' }}'
              DB_PASS='${{ secrets.WP_DB_PASSWORD }}'
              
              # If no password in secret, generate a temporary one
              if [ -z \"\$DB_PASS\" ]; then
                echo '⚠️ No WP_DB_PASSWORD secret found, generating temporary password'
                DB_PASS='wordpress_temp_\$(openssl rand -base64 12)'
              fi
              
              # Generate secure root password
              DB_ROOT_PASSWORD=\$(openssl rand -base64 32)
              
              # Set MariaDB root password with proper error handling
              echo '🔒 Setting MariaDB root password...'
              if ! sudo mysql -e \"ALTER USER 'root'@'localhost' IDENTIFIED BY '\$DB_ROOT_PASSWORD';\"; then
                echo '❌ Failed to set MariaDB root password'
                echo '💡 This usually means MariaDB is not properly configured'
                echo '💡 Please run the Install Packages workflow first'
                exit 1
              fi
              echo '✅ MariaDB root password set successfully'
              
              # Store root password configuration with proper error handling
              echo '💾 Storing root password configuration...'
              if ! echo '[client]' | sudo tee /root/.my.cnf > /dev/null; then
                echo '❌ Failed to create MySQL config file'
                exit 1
              fi
              
              if ! echo 'user=root' | sudo tee -a /root/.my.cnf > /dev/null; then
                echo '❌ Failed to add user to MySQL config'
                exit 1
              fi
              
              if ! echo \"password=\$DB_ROOT_PASSWORD\" | sudo tee -a /root/.my.cnf > /dev/null; then
                echo '❌ Failed to add password to MySQL config'
                exit 1
              fi
              
              if ! sudo chmod 600 /root/.my.cnf; then
                echo '❌ Failed to set MySQL config permissions'
                exit 1
              fi
              echo '✅ MySQL configuration file created successfully'
              
              # Verify configuration works
              echo '🔍 Verifying MySQL configuration...'
              if ! sudo mysql -e 'SELECT 1;' > /dev/null 2>&1; then
                echo '❌ Database security verification failed'
                echo '💡 MySQL configuration is not working properly'
                exit 1
              fi
              echo '✅ Database security verification successful'
              
              echo '🎉 Database security configured successfully!'
            "; then
            echo "❌ Database security setup failed!"
            echo "💡 Please check the Install Packages workflow completed successfully"
            exit 1
          fi
          
          echo "✅ Database security setup completed successfully!"

  install-wordpress:
    name: "📥 Install WordPress"
    runs-on: ubuntu-latest
    needs: setup-database
    
    outputs:
      admin_password: ${{ steps.install.outputs.admin_password }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${{ env.VM_INSTANCE }}"
          echo "- VM Zone: ${{ env.VM_ZONE }}"
          echo "- Project ID: ${{ env.GCP_PROJECT_ID }}"
          echo "📡 Using GitHub Variables for all infrastructure info (no files needed)"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      # Setup SSH access using fixed key from Secrets
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use fixed SSH key from Secrets
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi
      # Install WordPress
      - name: 📥 Install WordPress
        id: install
        run: |
          echo "📥 Installing WordPress..."
          
          # Exit immediately if any command fails
          set -e
          
          # Generate admin password
          ADMIN_PASSWORD=$(openssl rand -base64 24)
          
          # Get database credentials from GitHub Variables/Secrets
          DB_NAME="${{ vars.WP_DB_NAME || 'wordpress' }}"
          DB_USER="${{ vars.WP_DB_USER || 'wordpress' }}"
          DB_PASS="${{ secrets.WP_DB_PASSWORD }}"
          
          # If no password in secret, generate a temporary one (shouldn't happen)
          if [ -z "$DB_PASS" ]; then
            echo "⚠️ No WP_DB_PASSWORD secret found, using fallback"
            DB_PASS="wordpress_temp_$(openssl rand -base64 12)"
          fi
          
          echo "📋 Database Configuration:"
          echo "- Database: $DB_NAME"
          echo "- User: $DB_USER"
          echo "- Password: ${#DB_PASS} characters"
          
          # Use SSH key from provision-infra workflow (prevent gcloud from generating new keys)
          echo "🔧 Configuring gcloud to use existing SSH key..."
          gcloud config set compute/region ${VM_ZONE%-*}
          gcloud config set compute/zone $VM_ZONE
          
          # Force use of our existing SSH key
          printf "Host *\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          if ! gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
            --zone=$VM_ZONE \
            --quiet \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="
              set -e
              
              echo '📥 Starting WordPress installation...'
              
              # Remove any existing files (with sudo)
              echo '🗑️ Cleaning existing files...'
              sudo rm -rf /var/www/html/*
              
              # Ensure /var/www/html exists and has correct ownership
              sudo mkdir -p /var/www/html
              sudo chown -R www-data:www-data /var/www/html
              sudo chmod 755 /var/www/html
              
              cd /var/www/html
              
              # Download WordPress
              echo '⬇️ Downloading WordPress...'
              if ! sudo -u www-data /usr/local/bin/wp core download; then
                echo '❌ Failed to download WordPress'
                exit 1
              fi
              
              # Create wp-config.php
              echo '⚙️ Creating wp-config.php...'
              if ! sudo -u www-data /usr/local/bin/wp config create \
                  --dbname='$DB_NAME' \
                  --dbuser='$DB_USER' \
                  --dbpass='$DB_PASS' \
                  --dbhost=localhost; then
                echo '❌ Failed to create wp-config.php'
                exit 1
              fi
              
              # Add security constants to wp-config.php
              sudo -u www-data /usr/local/bin/wp config set WP_DEBUG false --raw
              sudo -u www-data /usr/local/bin/wp config set WP_DEBUG_LOG false --raw
              sudo -u www-data /usr/local/bin/wp config set DISALLOW_FILE_EDIT true --raw
              
              # Install WordPress
              echo '🚀 Installing WordPress...'
              if ! sudo -u www-data /usr/local/bin/wp core install \
                  --url=\"http://$DOMAIN_NAME\" \
                  --title=\"$SITE_TITLE\" \
                  --admin_user=$ADMIN_USER \
                  --admin_password='$ADMIN_PASSWORD' \
                  --admin_email=$ADMIN_EMAIL; then
                echo '❌ Failed to install WordPress'
                exit 1
              fi
              
              # Configure WordPress settings
              echo '⚙️ Configuring WordPress settings...'
              
              # Set permalink structure
              sudo -u www-data /usr/local/bin/wp option update permalink_structure '/%postname%/'
              
              # Configure timezone
              sudo -u www-data /usr/local/bin/wp option update timezone_string 'UTC'
              
              # Disable pingbacks
              sudo -u www-data /usr/local/bin/wp option update default_ping_status 'closed'
              sudo -u www-data /usr/local/bin/wp option update default_comment_status 'closed'
              
              # Set proper file permissions
              echo '🔒 Setting file permissions...'
              sudo chown -R www-data:www-data /var/www/html
              sudo find /var/www/html -type d -exec chmod 755 {} \;
              sudo find /var/www/html -type f -exec chmod 644 {} \;
              sudo chmod 600 /var/www/html/wp-config.php
              
              echo '✅ WordPress installation completed successfully!'
              echo '📊 WordPress Info:'
              sudo -u www-data /usr/local/bin/wp core version
              sudo -u www-data /usr/local/bin/wp option get siteurl
            "; then
            echo "❌ WordPress installation failed!"
            exit 1
          fi
          
          echo "admin_password=$ADMIN_PASSWORD" >> $GITHUB_OUTPUT
          echo "✅ WordPress installation completed successfully!"

  install-plugins:
    name: "🔌 Install Essential Plugins"
    runs-on: ubuntu-latest
    needs: install-wordpress
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${{ env.VM_INSTANCE }}"
          echo "- VM Zone: ${{ env.VM_ZONE }}"
          echo "- Project ID: ${{ env.GCP_PROJECT_ID }}"
          echo "📡 Using GitHub Variables for all infrastructure info (no files needed)"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      # Setup SSH access using fixed key from Secrets
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use fixed SSH key from Secrets
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi
      # Install essential plugins
      - name: 🔌 Install Essential Plugins
        run: |
          echo "🔌 Installing essential plugins..."
          
          # Exit immediately if any command fails
          set -e
          
          # Use SSH key from provision-infra workflow (prevent gcloud from generating new keys)
          echo "🔧 Configuring gcloud to use existing SSH key..."
          gcloud config set compute/region ${VM_ZONE%-*}
          gcloud config set compute/zone $VM_ZONE
          
          # Force use of our existing SSH key
          printf "Host *\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          if ! gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="
              set -e
              
              # Ensure we're in the WordPress directory
              cd /var/www/html
              
              # Set proper file ownership and permissions for WP-CLI operations
              echo '🔧 Setting proper file ownership and permissions...'
              sudo chown -R www-data:www-data /var/www/html
              sudo chmod 755 /var/www/html
              sudo chmod 644 /var/www/html/wp-config.php
              sudo find /var/www/html -type d -exec chmod 755 {} \;
              sudo find /var/www/html -type f -exec chmod 644 {} \;
              
              # Verify WordPress installation and file structure
              echo '🔍 Verifying WordPress installation and file structure...'
              if [ ! -f '/var/www/html/wp-config.php' ]; then
                echo '❌ wp-config.php not found'
                exit 1
              fi
              
              if [ ! -f '/var/www/html/wp-settings.php' ]; then
                echo '❌ wp-settings.php not found'
                exit 1
              fi
              
              # Check wp-config.php content
              if ! grep -q 'wp-settings.php' /var/www/html/wp-config.php; then
                echo '⚠️ wp-config.php may be corrupted, checking...'
                sudo tail -5 /var/www/html/wp-config.php
              fi
              
              # Test WP-CLI with explicit path and user context
              echo '🔍 Testing WP-CLI functionality...'
              if ! sudo -u www-data /usr/local/bin/wp --path=/var/www/html core is-installed --quiet; then
                echo '❌ WordPress is not properly installed or WP-CLI cannot access it'
                echo '� WP-CLI debug info:'
                sudo -u www-data /usr/local/bin/wp --path=/var/www/html --info 2>&1 || true
                exit 1
              fi
              echo '✅ WordPress installation and WP-CLI access verified'
              
              # Install Elementor
              echo '📦 Installing Elementor...'
              if ! sudo -u www-data /usr/local/bin/wp --path=/var/www/html plugin install elementor --activate --quiet; then
                echo '❌ Failed to install Elementor plugin'
                echo '📋 WP-CLI debug output:'
                sudo -u www-data /usr/local/bin/wp --path=/var/www/html plugin install elementor --activate 2>&1 || true
                exit 1
              fi
              echo '✅ Elementor installed successfully'
              
              # Install Pods (required for Smart Gallery)
              echo '📦 Installing Pods Framework...'
              if ! sudo -u www-data /usr/local/bin/wp --path=/var/www/html plugin install pods --activate --quiet; then
                echo '❌ Failed to install Pods Framework plugin'
                exit 1
              fi
              echo '✅ Pods Framework installed successfully'
              
              # Install WordPress SEO
              echo '📦 Installing WordPress SEO...'
              if ! sudo -u www-data /usr/local/bin/wp --path=/var/www/html plugin install wordpress-seo --activate --quiet; then
                echo '❌ Failed to install WordPress SEO plugin'
                exit 1
              fi
              echo '✅ WordPress SEO installed successfully'
              
              # Install security plugin
              echo '📦 Installing Wordfence Security...'
              if ! sudo -u www-data /usr/local/bin/wp --path=/var/www/html plugin install wordfence --activate --quiet; then
                echo '❌ Failed to install Wordfence Security plugin'
                exit 1
              fi
              echo '✅ Wordfence Security installed successfully'
              
              # Create demo content
              echo '📝 Creating demo content...'
              if ! sudo -u www-data /usr/local/bin/wp --path=/var/www/html post create \
                  --post_type=page \
                  --post_title='Smart Gallery Demo' \
                  --post_content='<p>This page will showcase the Smart Gallery plugin functionality.</p>' \
                  --post_status=publish \
                  --quiet; then
                echo '❌ Failed to create demo content'
                exit 1
              fi
              echo '✅ Demo content created successfully'
              
              # Restore secure wp-config.php permissions
              echo '🔒 Restoring secure wp-config.php permissions...'
              sudo chmod 600 /var/www/html/wp-config.php
              
              echo '🎉 Essential plugins installation completed successfully!'
            "; then
            echo "❌ Plugin installation failed!"
            exit 1
          fi
          
          echo "✅ Essential plugins installation completed successfully!"

  setup-ssl:
    name: "🔒 Setup SSL Certificate"
    runs-on: ubuntu-latest
    needs: [install-plugins, install-wordpress]
    
    outputs:
      site_url: ${{ steps.ssl.outputs.site_url }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${{ env.VM_INSTANCE }}"
          echo "- VM Zone: ${{ env.VM_ZONE }}"
          echo "- Project ID: ${{ env.GCP_PROJECT_ID }}"
          echo "📡 Using GitHub Variables for all infrastructure info (no files needed)"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      # Setup SSH access using fixed key from Secrets
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use fixed SSH key from Secrets
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi
      # Setup SSL certificate
      - name: 🔒 Setup SSL Certificate
        id: ssl
        run: |
          echo "🔒 Setting up SSL certificate..."
          
          # Exit immediately if any command fails
          set -e
          
          # Use SSH key from provision-infra workflow (prevent gcloud from generating new keys)
          echo "🔧 Configuring gcloud to use existing SSH key..."
          gcloud config set compute/region ${VM_ZONE%-*}
          gcloud config set compute/zone $VM_ZONE
          
          # Force use of our existing SSH key
          printf "Host *\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          if ! gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
            --zone=$VM_ZONE \
            --quiet \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="
              set -e
              
              # Configure SSL with Let's Encrypt
              echo '🔒 Getting SSL certificate for $DOMAIN_NAME...'
              echo 'Note: This requires DNS to be properly configured'
              
              # Verify DNS before attempting SSL
              echo '🔍 Verifying DNS resolution...'
              RESOLVED_IP=\$(dig +short $DOMAIN_NAME | tail -1)
              CURRENT_IP=\$(curl -s ifconfig.me)
              
              echo \"Domain resolves to: \$RESOLVED_IP\"
              echo \"VM external IP is: \$CURRENT_IP\"
              
              if [ \"\$RESOLVED_IP\" = \"\$CURRENT_IP\" ]; then
                echo '✅ DNS is correctly configured!'
              else
                echo '⚠️ WARNING: DNS mismatch detected!'
                echo 'The domain does not point to this VM yet.'
                echo 'SSL certificate issuance may fail.'
              fi
              
              # Get SSL certificate
              echo '📜 Requesting SSL certificate from Let'\''s Encrypt...'
              if sudo certbot --nginx \
                  --non-interactive \
                  --agree-tos \
                  --email $LETSENCRYPT_EMAIL \
                  --domains $DOMAIN_NAME \
                  --redirect; then
                echo '✅ SSL certificate obtained and configured!'
                
                # Update WordPress URL to HTTPS (if WordPress is installed)
                if [ -f /var/www/html/wp-config.php ]; then
                  echo '🔧 Updating WordPress URLs to HTTPS...'
                  cd /var/www/html
                  sudo -u www-data /usr/local/bin/wp option update home \"https://$DOMAIN_NAME\" --quiet 2>/dev/null || echo '⚠️ Could not update home URL (will be set during WP install)'
                  sudo -u www-data /usr/local/bin/wp option update siteurl \"https://$DOMAIN_NAME\" --quiet 2>/dev/null || echo '⚠️ Could not update siteurl (will be set during WP install)'
                  echo '✅ WordPress URLs updated to HTTPS'
                else
                  echo 'ℹ️ WordPress not yet installed - URLs will be set during installation'
                fi
              else
                echo '❌ Certbot failed to obtain SSL certificate'
                echo '📋 Last 30 lines of certbot log:'
                sudo tail -30 /var/log/letsencrypt/letsencrypt.log 2>/dev/null || echo 'No log available'
                echo ''
                echo '⚠️ Continuing without SSL - site will be HTTP only'
                echo '💡 You can manually run certbot later: sudo certbot --nginx -d $DOMAIN_NAME'
              fi
              
              # Setup auto-renewal
              echo '🔄 Setting up certificate auto-renewal...'
              if ! sudo crontab -l 2>/dev/null | grep -q 'certbot renew'; then
                  (sudo crontab -l 2>/dev/null; echo '0 12 * * * /usr/bin/certbot renew --quiet') | sudo crontab -
                  echo '✅ Auto-renewal cron job configured'
              fi
              
              # Store credentials for later use
              echo \"ADMIN_USER=$ADMIN_USER\" | sudo tee /root/.wp-admin-config > /dev/null
              echo \"ADMIN_PASSWORD=${{ needs.install-wordpress.outputs.admin_password }}\" | sudo tee -a /root/.wp-admin-config > /dev/null
              echo \"ADMIN_EMAIL=$ADMIN_EMAIL\" | sudo tee -a /root/.wp-admin-config > /dev/null
              echo \"SITE_URL=https://$DOMAIN_NAME\" | sudo tee -a /root/.wp-admin-config > /dev/null
              sudo chmod 600 /root/.wp-admin-config
              
              # Final Nginx reload
              sudo systemctl reload nginx
              
              echo '✅ SSL setup process completed!'
            "; then
            echo "❌ SSL setup failed!"
            exit 1
          fi
          
          echo "site_url=https://$DOMAIN_NAME" >> $GITHUB_OUTPUT
          echo "✅ SSL setup completed successfully!"

  health-check:
    name: "🏥 Health Check & Summary"
    runs-on: ubuntu-latest
    needs: [setup-ssl, install-wordpress]
    
    outputs:
      site_url: ${{ needs.setup-ssl.outputs.site_url }}
      admin_password: ${{ needs.install-wordpress.outputs.admin_password }}
    
    steps:
      # Checkout repository
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      # Load infrastructure information from GitHub Variables only
      - name: 🔍 Load Infrastructure Information
        id: load_info
        run: |
          echo "🔍 Loading infrastructure information from GitHub Variables..."
          
          # Use GitHub Variables directly (no file dependencies)
          echo "VM_INSTANCE=${{ env.VM_INSTANCE }}" >> $GITHUB_ENV
          echo "VM_ZONE=${{ env.VM_ZONE }}" >> $GITHUB_ENV
          echo "GCP_PROJECT_ID=${{ env.GCP_PROJECT_ID }}" >> $GITHUB_ENV
          
          echo "📊 Infrastructure Information:"
          echo "- VM Instance: ${{ env.VM_INSTANCE }}"
          echo "- VM Zone: ${{ env.VM_ZONE }}"
          echo "- Project ID: ${{ env.GCP_PROJECT_ID }}"
          echo "📡 Using GitHub Variables for all infrastructure info (no files needed)"

      # Authenticate to GCP
      - name: 🔐 Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ☁️ Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
      # Setup SSH access using fixed key from Secrets
      - name: 🔑 Setup SSH Access
        run: |
          echo "🔑 Setting up SSH access using key from provision-infra workflow..."
          
          # Create SSH directory
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          
          # Use fixed SSH key from Secrets
          if [ -n "${{ secrets.VM_SSH_PRIVATE_KEY }}" ]; then
            echo "${{ secrets.VM_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
            chmod 600 ~/.ssh/id_rsa
            
            # Generate public key from private key
            ssh-keygen -y -f ~/.ssh/id_rsa > ~/.ssh/id_rsa.pub
            chmod 644 ~/.ssh/id_rsa.pub
            
            echo "✅ SSH key loaded (generated by provision-infra workflow)"
          else
            echo "❌ VM_SSH_PRIVATE_KEY secret not found!"
            exit 1
          fi
      # Health check
      - name: 🏥 Health Check
        env:
          SITE_URL: ${{ needs.setup-ssl.outputs.site_url }}
        run: |
          echo "🏥 Running health check..."
          
          # Exit immediately if any command fails
          set -e
          
          # Wait for services to stabilize
          sleep 30
          
          # Use SSH key from provision-infra workflow (prevent gcloud from generating new keys)
          echo "🔧 Configuring gcloud to use existing SSH key..."
          gcloud config set compute/region ${VM_ZONE%-*}
          gcloud config set compute/zone $VM_ZONE
          
          # Force use of our existing SSH key
          printf "Host *\n  IdentityFile ~/.ssh/id_rsa\n  StrictHostKeyChecking no\n  UserKnownHostsFile /dev/null\n" > ~/.ssh/config
          chmod 600 ~/.ssh/config
          
          # Check if SSL was actually configured by checking nginx config
          echo "🔍 Verifying SSL configuration on VM..."
          if ! SSL_CONFIGURED=$(gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
            --zone=$VM_ZONE \
            --quiet \
            --ssh-key-file=~/.ssh/id_rsa \
            --command="grep -q 'listen 443 ssl' /etc/nginx/sites-enabled/wordpress && echo 'true' || echo 'false'"); then
            echo "❌ Failed to check SSL configuration on VM"
            exit 1
          fi
          
          if [ "$SSL_CONFIGURED" = "true" ]; then
            echo "✅ SSL is configured in Nginx"
            
            # Check HTTPS site
            echo "🔍 Testing HTTPS site..."
            if curl -sSf -k "$SITE_URL" > /dev/null 2>&1; then
              echo "✅ HTTPS site is responding!"
            else
              echo "⚠️ HTTPS configured but site not responding yet (may need DNS propagation)"
              echo "💡 Try accessing: $SITE_URL"
            fi
            
            # Check HTTP to HTTPS redirect
            echo "🔍 Testing HTTP to HTTPS redirect..."
            HTTP_CODE=$(curl -sSL -w "%{http_code}" -o /dev/null "http://$DOMAIN_NAME" 2>/dev/null || echo "000")
            if echo "$HTTP_CODE" | grep -q "30[1-8]"; then
              echo "✅ HTTP redirects to HTTPS (code: $HTTP_CODE)"
            else
              echo "⚠️ HTTP returned code: $HTTP_CODE"
            fi
          else
            echo "⚠️ SSL not configured in Nginx - certbot may have failed"
            echo "🔍 Checking certbot logs..."
            gcloud compute ssh $VM_INSTANCE \ --ssh-key-file=~/.ssh/id_rsa
              --zone=$VM_ZONE \
              --quiet \
              --ssh-key-file=~/.ssh/id_rsa \
              --command="sudo tail -20 /var/log/letsencrypt/letsencrypt.log 2>/dev/null || echo 'No certbot logs found'"
            
            # Try HTTP access instead
            echo "🔍 Testing HTTP site (fallback)..."
            if curl -sSf "http://$DOMAIN_NAME" > /dev/null 2>&1; then
              echo "✅ HTTP site is accessible!"
              echo "⚠️ But HTTPS is not configured - please check certbot logs"
              echo "💡 You can manually run: sudo certbot --nginx -d $DOMAIN_NAME"
            else
              echo "❌ Site is not accessible via HTTP or HTTPS"
              exit 1
            fi
          fi
          
          echo "🎉 Health check completed successfully!"

      # Display configuration summary
      - name: 📊 Configuration Summary
        env:
          SITE_URL: ${{ needs.setup-ssl.outputs.site_url }}
          ADMIN_PASSWORD: ${{ needs.install-wordpress.outputs.admin_password }}
        run: |
          echo "## ⚙️ Environment Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ WordPress Installation:" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: $SITE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin User**: \`$ADMIN_USER\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Password**: \`$ADMIN_PASSWORD\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Email**: $ADMIN_EMAIL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔒 Security Features:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ SSL Certificate (Let's Encrypt)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ HTTPS Redirect" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security Headers" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Wordfence Security Plugin" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔌 Installed Plugins:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Elementor" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Pods Framework" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ WordPress SEO" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Wordfence Security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run **Deploy Plugin** workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Access admin at: $SITE_URL/wp-admin/" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure Smart Gallery widget in Elementor" >> $GITHUB_STEP_SUMMARY

      # Environment configuration completed - using GitHub Variables only
      - name: ✅ Environment Configuration Summary
        env:
          SITE_URL: ${{ needs.setup-ssl.outputs.site_url }}
          ADMIN_PASSWORD: ${{ needs.install-wordpress.outputs.admin_password }}
        run: |
          echo "✅ Environment configuration completed successfully!"
          echo ""
          echo "📊 Configuration Summary (stored in GitHub Variables):"
          echo "- Site URL: $SITE_URL ✅"
          echo "- Admin User: $ADMIN_USER ✅"
          echo "- Admin Email: $ADMIN_EMAIL ✅"
          echo "- Domain: $DOMAIN_NAME ✅"
          echo "- Site Title: $SITE_TITLE ✅"
          echo "- Let's Encrypt Email: $LETSENCRYPT_EMAIL ✅"
          echo "🔐 Admin Password: Securely generated ✅"
          echo ""
          echo "🚀 Ready for 'Deploy Plugin' workflow!"
          echo "💡 All configuration stored in GitHub Variables and Secrets"

      # Cleanup
      - name: 🗑️ Cleanup
        if: always()
        run: |
          rm -f configure-nginx.sh
          echo "✅ Configuration workflow completed"
