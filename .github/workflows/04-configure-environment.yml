name: 4. Configure environment ‚öôÔ∏è

on:
  workflow_dispatch:
    inputs:
      project_id:
        description: 'GCP Project ID (optional if stored as variable)'
        required: false
        type: string
      vm_instance:
        description: 'VM Instance Name (optional if stored as variable)'
        required: false
        type: string
      vm_zone:
        description: 'VM Zone (optional if stored as variable)'
        required: false
        type: string
      domain_name:
        description: 'Domain name'
        required: true
        type: string
      site_title:
        description: 'WordPress Site Title'
        required: false
        default: 'Smart Gallery Demo'
        type: string
      admin_user:
        description: 'WordPress Admin Username'
        required: false
        default: 'admin'
        type: string
      admin_email:
        description: 'WordPress Admin Email'
        required: true
        type: string
      letsencrypt_email:
        description: "Let's Encrypt Email"
        required: true
        type: string

env:
  GCP_PROJECT_ID: ${{ github.event.inputs.project_id || vars.GCP_PROJECT_ID }}
  VM_INSTANCE: ${{ github.event.inputs.vm_instance || vars.GCP_VM_INSTANCE }}
  VM_ZONE: ${{ github.event.inputs.vm_zone || vars.GCP_VM_ZONE }}
  DOMAIN_NAME: ${{ github.event.inputs.domain_name }}
  SITE_TITLE: ${{ github.event.inputs.site_title }}
  ADMIN_USER: ${{ github.event.inputs.admin_user }}
  ADMIN_EMAIL: ${{ github.event.inputs.admin_email }}
  LETSENCRYPT_EMAIL: ${{ github.event.inputs.letsencrypt_email }}

jobs:
  configure:
    name: Configure Environment
    runs-on: ubuntu-latest
    
    outputs:
      site_url: ${{ steps.configure.outputs.site_url }}
      admin_password: ${{ steps.configure.outputs.admin_password }}
    
    steps:
      # Checkout repository
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      # Authenticate to GCP
      - name: üîê Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ env.GCP_PROJECT_ID }}

      # Setup Google Cloud SDK
      - name: ‚òÅÔ∏è Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Create configuration script
      - name: üìù Create Configuration Script
        run: |
          cat > configure-environment.sh << 'EOF'
          #!/bin/bash
          # Environment configuration script
          
          set -e
          exec > >(tee /var/log/environment-configuration.log)
          exec 2>&1
          
          DOMAIN_NAME="$1"
          SITE_TITLE="$2"
          ADMIN_USER="$3"
          ADMIN_EMAIL="$4"
          LETSENCRYPT_EMAIL="$5"
          
          echo "‚öôÔ∏è Smart Gallery Environment Configuration - $(date)"
          echo "Domain: $DOMAIN_NAME"
          echo "Site Title: $SITE_TITLE"
          echo "Admin User: $ADMIN_USER"
          echo "Admin Email: $ADMIN_EMAIL"
          
          # Load database credentials
          source /root/.wp-db-config
          
          # Generate secure passwords
          ADMIN_PASSWORD=$(openssl rand -base64 24)
          DB_ROOT_PASSWORD=$(openssl rand -base64 32)
          
          # Set MariaDB root password
          echo "üîí Setting MariaDB root password..."
          mysql -e "ALTER USER 'root'@'localhost' IDENTIFIED BY '$DB_ROOT_PASSWORD';"
          
          # Store root password
          echo "[client]" > /root/.my.cnf
          echo "user=root" >> /root/.my.cnf
          echo "password=$DB_ROOT_PASSWORD" >> /root/.my.cnf
          chmod 600 /root/.my.cnf
          
          # Configure Nginx
          echo "üåê Configuring Nginx..."
          
          # Remove default site
          rm -f /etc/nginx/sites-enabled/default
          
          # Create WordPress site configuration
          cat > /etc/nginx/sites-available/wordpress <<'NGINX_CONF'
          server {
              listen 80;
              server_name $DOMAIN_NAME;
              root /var/www/html;
              index index.php index.html index.htm;
              
              # Security headers
              add_header X-Frame-Options "SAMEORIGIN" always;
              add_header X-XSS-Protection "1; mode=block" always;
              add_header X-Content-Type-Options "nosniff" always;
              add_header Referrer-Policy "no-referrer-when-downgrade" always;
              add_header Content-Security-Policy "default-src 'self' http: https: data: blob: 'unsafe-inline'" always;
              
              # Gzip compression
              gzip on;
              gzip_vary on;
              gzip_min_length 1024;
              gzip_types text/plain text/css text/xml text/javascript application/x-javascript application/xml+rss application/javascript application/json;
              
              location = /favicon.ico { log_not_found off; access_log off; }
              location = /robots.txt { allow all; log_not_found off; access_log off; }
              location / { try_files \$uri \$uri/ /index.php?\$args; }
              location ~ \.php$ {
                  include snippets/fastcgi-php.conf;
                  fastcgi_pass unix:/var/run/php/php8.3-fpm.sock;
                  fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
                  include fastcgi_params;
              }
              location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                  expires 1y;
                  add_header Cache-Control "public, immutable";
              }
              location ~ /\. { deny all; }
              location ~ ^/(wp-config\.php|wp-config-sample\.php|readme\.html|license\.txt) { deny all; }
          }
          NGINX_CONF
          
          # Enable site
          ln -sf /etc/nginx/sites-available/wordpress /etc/nginx/sites-enabled/
          
          # Test and reload Nginx
          nginx -t
          systemctl reload nginx
          
          # Verify and install WP-CLI if needed
          echo "üîß Verifying WP-CLI installation..."
          if ! wp --version >/dev/null 2>&1; then
            echo "‚ö†Ô∏è WP-CLI not found or corrupted, reinstalling..."
            rm -f /usr/local/bin/wp
            
            # Download and install WP-CLI with verification
            curl -o wp-cli.phar https://raw.githubusercontent.com/wp-cli/wp-cli/v2.8.1/bin/wp-cli.phar
            
            # Verify the download
            if [ ! -s wp-cli.phar ]; then
              echo "‚ùå Failed to download WP-CLI"
              exit 1
            fi
            
            # Check if it's actually the WP-CLI binary
            if ! php wp-cli.phar --version >/dev/null 2>&1; then
              echo "‚ùå Downloaded WP-CLI is corrupted"
              exit 1
            fi
            
            chmod +x wp-cli.phar
            mv wp-cli.phar /usr/local/bin/wp
            echo "‚úÖ WP-CLI reinstalled successfully"
          else
            echo "‚úÖ WP-CLI is working correctly"
          fi
          
          # Download and install WordPress
          echo "üì• Installing WordPress..."
          cd /var/www/html
          
          # Remove any existing files
          rm -rf *
          
          # Download WordPress
          wp core download --allow-root
          
          # Create wp-config.php
          wp config create \
              --dbname=$DB_NAME \
              --dbuser=$DB_USER \
              --dbpass=$DB_PASS \
              --dbhost=localhost \
              --allow-root
          
          # Install WordPress
          wp core install \
              --url="http://$DOMAIN_NAME" \
              --title="$SITE_TITLE" \
              --admin_user=$ADMIN_USER \
              --admin_password=$ADMIN_PASSWORD \
              --admin_email=$ADMIN_EMAIL \
              --allow-root
          
          # Configure WordPress settings
          echo "‚öôÔ∏è Configuring WordPress..."
          
          # Set permalink structure
          wp option update permalink_structure '/%postname%/' --allow-root
          
          # Configure timezone
          wp option update timezone_string 'UTC' --allow-root
          
          # Set proper file permissions
          chown -R www-data:www-data /var/www/html
          find /var/www/html -type d -exec chmod 755 {} \;
          find /var/www/html -type f -exec chmod 644 {} \;
          chmod 600 /var/www/html/wp-config.php
          
          # Install essential plugins
          echo "üîå Installing essential plugins..."
          
          # Install Elementor
          wp plugin install elementor --activate --allow-root
          
          # Install Pods (required for Smart Gallery)
          wp plugin install pods --activate --allow-root
          
          # Install WordPress SEO
          wp plugin install wordpress-seo --activate --allow-root
          
          # Install security plugin
          wp plugin install wordfence --activate --allow-root
          
          # Create some demo content
          echo "üìù Creating demo content..."
          
          # Create a sample page
          wp post create \
              --post_type=page \
              --post_title='Smart Gallery Demo' \
              --post_content='<p>This page will showcase the Smart Gallery plugin functionality.</p>' \
              --post_status=publish \
              --allow-root
          
          # Configure SSL with Let's Encrypt
          echo "üîí Setting up SSL certificate..."
          
          # Get SSL certificate
          certbot --nginx \
              --non-interactive \
              --agree-tos \
              --email $LETSENCRYPT_EMAIL \
              --domains $DOMAIN_NAME \
              --redirect
          
          # Update WordPress URL to HTTPS
          wp option update home "https://$DOMAIN_NAME" --allow-root
          wp option update siteurl "https://$DOMAIN_NAME" --allow-root
          
          # Setup auto-renewal
          echo "üîÑ Setting up certificate auto-renewal..."
          if ! crontab -l 2>/dev/null | grep -q 'certbot renew'; then
              (crontab -l 2>/dev/null; echo "0 12 * * * /usr/bin/certbot renew --quiet") | crontab -
          fi
          
          # Store credentials for later use
          echo "ADMIN_USER=$ADMIN_USER" > /root/.wp-admin-config
          echo "ADMIN_PASSWORD=$ADMIN_PASSWORD" >> /root/.wp-admin-config
          echo "ADMIN_EMAIL=$ADMIN_EMAIL" >> /root/.wp-admin-config
          echo "SITE_URL=https://$DOMAIN_NAME" >> /root/.wp-admin-config
          chmod 600 /root/.wp-admin-config
          
          # Final Nginx reload
          systemctl reload nginx
          
          echo "‚úÖ Environment configuration completed successfully!"
          echo "üåê Site URL: https://$DOMAIN_NAME"
          echo "üë§ Admin User: $ADMIN_USER"
          echo "üîë Admin Password: $ADMIN_PASSWORD"
          echo "üìß Admin Email: $ADMIN_EMAIL"
          
          touch /var/log/environment-configured
          EOF
          
          chmod +x configure-environment.sh

      # Execute configuration on VM
      - name: ‚öôÔ∏è Configure Environment on VM
        id: configure
        run: |
          echo "‚öôÔ∏è Starting environment configuration..."
          
          # Copy configuration script to VM
          gcloud compute scp configure-environment.sh \
            $VM_INSTANCE:~/configure-environment.sh \
            --zone=$VM_ZONE \
            --quiet
          
          # Execute configuration script
          gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="
              sudo chmod +x ~/configure-environment.sh
              sudo ~/configure-environment.sh \
                '$DOMAIN_NAME' \
                '$SITE_TITLE' \
                '$ADMIN_USER' \
                '$ADMIN_EMAIL' \
                '$LETSENCRYPT_EMAIL'
            "
          
          # Get admin password from VM
          ADMIN_PASSWORD=$(gcloud compute ssh $VM_INSTANCE \
            --zone=$VM_ZONE \
            --quiet \
            --command="sudo grep 'ADMIN_PASSWORD=' /root/.wp-admin-config | cut -d'=' -f2")
          
          echo "site_url=https://$DOMAIN_NAME" >> $GITHUB_OUTPUT
          echo "admin_password=$ADMIN_PASSWORD" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Environment configuration completed!"

      # Health check
      - name: üè• Health Check
        env:
          SITE_URL: https://${{ env.DOMAIN_NAME }}
        run: |
          echo "üè• Running health check..."
          
          # Wait for services to stabilize
          sleep 30
          
          # Check HTTP to HTTPS redirect
          echo "üîç Testing HTTP to HTTPS redirect..."
          if curl -sSL -w "%{http_code}" "http://$DOMAIN_NAME" -o /dev/null | grep -q "30[1-8]"; then
            echo "‚úÖ HTTP redirects to HTTPS!"
          else
            echo "‚ö†Ô∏è HTTP redirect may not be working"
          fi
          
          # Check HTTPS site
          echo "üîç Testing HTTPS site..."
          if curl -sSf "$SITE_URL" > /dev/null; then
            echo "‚úÖ HTTPS site is responding!"
          else
            echo "‚ùå HTTPS site health check failed!"
            exit 1
          fi
          
          # Check WordPress admin
          echo "üîç Testing WordPress admin..."
          if curl -sSf "$SITE_URL/wp-admin/" > /dev/null; then
            echo "‚úÖ WordPress admin is accessible!"
          else
            echo "‚ö†Ô∏è WordPress admin may need attention"
          fi
          
          echo "üéâ Health check completed!"

      # Display configuration summary
      - name: üìä Configuration Summary
        env:
          SITE_URL: ${{ steps.configure.outputs.site_url }}
          ADMIN_PASSWORD: ${{ steps.configure.outputs.admin_password }}
        run: |
          echo "## ‚öôÔ∏è Environment Configuration Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ WordPress Installation:" >> $GITHUB_STEP_SUMMARY
          echo "- **Site URL**: $SITE_URL" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin User**: \`$ADMIN_USER\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Password**: \`$ADMIN_PASSWORD\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Admin Email**: $ADMIN_EMAIL" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîí Security Features:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ SSL Certificate (Let's Encrypt)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ HTTPS Redirect" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Security Headers" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Wordfence Security Plugin" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîå Installed Plugins:" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Elementor" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Pods Framework" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ WordPress SEO" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Wordfence Security" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üéØ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Run **Deploy Plugin** workflow" >> $GITHUB_STEP_SUMMARY
          echo "2. Access admin at: $SITE_URL/wp-admin/" >> $GITHUB_STEP_SUMMARY
          echo "3. Configure Smart Gallery widget in Elementor" >> $GITHUB_STEP_SUMMARY

      # Cleanup
      - name: üóëÔ∏è Cleanup
        if: always()
        run: |
          rm -f configure-environment.sh
          echo "‚úÖ Configuration workflow completed"